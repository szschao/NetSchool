{
  "stats": {
    "suites": 2,
    "tests": 51,
    "passes": 49,
    "pending": 2,
    "failures": 0,
    "start": "2017-09-06T03:06:03.355Z",
    "end": "2017-09-06T03:06:03.455Z",
    "duration": 100,
    "testsRegistered": 51,
    "passPercent": 100,
    "pendingPercent": 3.9,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "chai expect",
        "suites": [],
        "tests": [
          {
            "title": ".not - Negates any of assertions following in the chain.",
            "fullTitle": "chai expect .not - Negates any of assertions following in the chain.",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(function () { }).to.not.throw(Error);\nexpect(foo).to.not.be.equal('bar');\nexpect({foo: 'baz'}).to.have.property('foo')\n    .and.not.equal('bar');\nexpect({a: 1}).to.not.have.property('b');\nexpect([1, 2]).to.be.an('array')\n    .that.does.not.include(3);\n// 慎用 not 断言一个预期的,比没有预期的否定要好\nexpect(2).to.equal(2); // Recommended\nexpect(2).to.not.equal(1); // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "a1852ee7-24bb-4ea2-bf5a-3408ffa6dff7",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".deep - Sets the deep flag, later used by the equal and property assertions.",
            "fullTitle": "chai expect .deep - Sets the deep flag, later used by the equal and property assertions.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Causes all .equal, .include, .members, .keys, and .property assertions\n        // that follow in the chain to use deep equality instead of strict (===) equality.\n        // Target object deeply (but not strictly) equals `{a: 1}`\n        expect({a: 1}).to.deep.equal({a: 1});\n        expect({a: 1}).to.not.equal({a: 1});\n        // Target array deeply (but not strictly) includes `{a: 1}`\n        expect([{a: 1}]).to.deep.include({a: 1});\n        expect([{a: 1}]).to.not.include({a: 1});\n        // Target object deeply (but not strictly) includes `x: {a: 1}`\n        expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n        expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n        // Target array deeply (but not strictly) has member `{a: 1}`\n        expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n        expect([{a: 1}]).to.not.have.members([{a: 1}]);\n        // Target set deeply (but not strictly) has key `{a: 1}`\n        expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n        expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n        // Target object deeply (but not strictly) has property `x: {a: 1}`\n        expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n        expect({x: {a: 1}}).to.not.have.property('x', {a: 1});",
            "err": {},
            "isRoot": false,
            "uuid": "63dfc865-d307-47a2-a45b-3107371fd495",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
            "fullTitle": "chai expect .nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n// If . or [] are part of an actual property name, they can be escaped by adding two backslashes before them.\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\nvar deepObj = {\n    green: {tea: 'matcha'}\n    , teas: ['chai', 'matcha', {tea: 'konacha'}]\n};\nexpect(deepObj).to.have.nested.property('green');\nexpect(deepObj).to.have.nested.property('green.tea','matcha');\nexpect(deepObj).to.have.nested.property('teas[1]','matcha');\nexpect(deepObj).to.have.nested.property('teas[2].tea','konacha');\nvar arr = [\n    ['chai', 'matcha', 'konacha']\n    , [{tea: 'chai'}\n        , {tea: 'matcha'}\n        , {tea: 'konacha'}]\n];\nexpect(arr).to.have.nested.property('[0][1]', 'matcha');\nexpect(arr).to.have.nested.property('[1][2].tea', 'konacha');",
            "err": {},
            "isRoot": false,
            "uuid": "2e51460d-7f28-4937-8436-b0ba69e78127",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
            "fullTitle": "chai expect .any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(foo).to.have.any.keys('bar', 'baz');\nexpect({a:1,b:2}).to.not.have.any.keys('c','d');",
            "err": {},
            "isRoot": false,
            "uuid": "ebc01410-c557-44cc-bb3e-787d4c79488d",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
            "fullTitle": "chai expect .all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(foo1).to.have.all.keys('bar', 'baz');\nexpect({a:1,b:2}).to.have.all.keys('a','b');",
            "err": {},
            "isRoot": false,
            "uuid": "86963c33-376c-4158-a4e7-3c16e18757fb",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
            "fullTitle": "chai expect .a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foo').to.be.a('string');\nexpect({foo: 'bar'}).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\nexpect(new Error).to.be.an('error');\nexpect(Promise.resolve()).to.be.a('promise');\nexpect(new Float32Array()).to.be.a('float32array');\nexpect(Symbol()).to.be.a('symbol');\n// language chain\nexpect(myFather).to.be.an.instanceof(Person);\n// .a supports objects\n// var myObj = {\n//     [Symbol.toStringTag]: 'myCustomType'\n// };\n// expect(myObj).to.be.a('myCustomType').but.not.an('object');\n// It’s often best to use .a to check a target’s type\n// before making more assertions on the same target.\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\nexpect([]).to.be.an('array').that.is.empty;\n// it’s often best to assert that the target is the expected type,\n// rather than asserting that it isn’t one of many unexpected types.\nexpect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.an('array'); // Not recommended\n// .a accepts an optional msg argument\n// which is a custom error message to show when the assertion fails.\n// expect(1).to.be.a('string', 'nooo why fail??');\n// expect(1, 'nooo why fail??').to.be.a('string');\n\n// .a can also be used as a language chain to improve the readability of your assertions.\nexpect({b: 2}).to.have.a.property('b');",
            "err": {},
            "isRoot": false,
            "uuid": "ab714d1a-0091-433b-82c6-e1e7757a9704",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
            "fullTitle": "chai expect .include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2, 3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({foo: 'bar', hello: 'universe'}).to.include.keys('foo');\nexpect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\nexpect(new Set([1, 2])).to.include(2);\nexpect(new Map([['a', 1], ['b', 2]])).to.include(2);\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\n// Target array deeply (but not strictly) includes `{a: 1}`\nexpect([{a: 1}]).to.deep.include({a: 1});\nexpect([{a: 1}]).to.not.include({a: 1});\n// Target object deeply (but not strictly) includes `x: {a: 1}`\nexpect({x: {a: 1}}).to.deep.include({x: {a: 1}});\nexpect({x: {a: 1}}).to.not.include({x: {a: 1}});\nObject.prototype.b = 2;\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\nexpect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\nexpect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\nexpect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\nexpect('foobar').to.not.include('taco');\nexpect([1, 2, 3]).to.not.include(4);\nexpect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\nexpect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\nexpect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\nexpect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n// expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n// expect([1, 2, 3], 'nooo why fail??').to.include(4);\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n// Target array is a superset of [1, 2] but not identical\nexpect([1, 2, 3]).to.include.members([1, 2]);\nexpect([1, 2, 3]).to.not.have.members([1, 2]);\n// Duplicates in the subset are ignored\nexpect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n// Both assertions are identical\nexpect({a: 1}).to.include.any.keys('a', 'b');\nexpect({a: 1}).to.have.any.keys('a', 'b');",
            "err": {},
            "isRoot": false,
            "uuid": "aac5002e-886e-4f68-bc40-b36066eebd9f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".ok - Asserts that the target is truthy.",
            "fullTitle": "chai expect .ok - Asserts that the target is truthy.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.be.ok; // Not recommended\nexpect(true).to.be.true; // Recommended\nexpect(true).to.be.ok; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.not.be.ok; // Not recommended\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.ok; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.be.ok; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.be.ok; // Not recommended\n// expect(false, 'nooo why fail??').to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "30e64a52-c0ed-4301-b2bf-477285c2a54e",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".true - Asserts that the target is true.",
            "fullTitle": "chai expect .true - Asserts that the target is true.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(true).to.be.true;\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.true; // Not recommended\nexpect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.true; // Not recommended\n// expect(false, 'nooo why fail??').to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "0ba36833-cceb-4358-9add-54872009eda3",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".false - Asserts that the target is false.",
            "fullTitle": "chai expect .false - Asserts that the target is false.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//只有 false 等于 false\nexpect(false).to.be.false;\n//0 不是 false\nexpect(0).to.not.be.false;",
            "err": {},
            "isRoot": false,
            "uuid": "7aa5d7db-7464-4e84-8ecf-082a91b695a8",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".null - Asserts that the target is null.",
            "fullTitle": "chai expect .null - Asserts that the target is null.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(null).to.be.null;\nexpect(undefined).to.not.be.null;",
            "err": {},
            "isRoot": false,
            "uuid": "add709d3-5848-401c-94bf-e78e29383fd6",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".undefined - Asserts that the target is undefined.",
            "fullTitle": "chai expect .undefined - Asserts that the target is undefined.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "15acd0c2-92aa-4969-ae00-ca6d77445094",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".NaN - Asserts that the target is NaN.",
            "fullTitle": "chai expect .NaN - Asserts that the target is NaN.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(NaN).to.be.NaN;\nexpect(4).to.not.be.NaN;",
            "err": {},
            "isRoot": false,
            "uuid": "a979ea80-4903-41ca-bc52-087acb9d778c",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".exit - Asserts that the target is neither null nor undefined.",
            "fullTitle": "chai expect .exit - Asserts that the target is neither null nor undefined.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.exist; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.exist; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.exist; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.exist; // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "6e6f2eb1-a17a-403f-85ee-a3c248d106e4",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".empty - Asserts that the target’s length is 0. ",
            "fullTitle": "chai expect .empty - Asserts that the target’s length is 0. ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;\nexpect(new Set()).to.be.empty;\nexpect(new Map()).to.be.empty;\nexpect([]).to.be.an('array').that.is.empty;\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.not.be.empty; // Not recommended\nexpect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\nexpect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\nexpect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\nexpect({a: 1}).to.not.be.empty; // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "2b2af0a4-d5f7-4aa0-adca-a3d7b74fe84a",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".arguments - Asserts that the target is an arguments object.",
            "fullTitle": "chai expect .arguments - Asserts that the target is an arguments object.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function test () {\n    expect(arguments).to.be.arguments;\n}\ntest();",
            "err": {},
            "isRoot": false,
            "uuid": "9f7e5147-d212-493c-bfeb-0f6111abe968",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
            "fullTitle": "chai expect .equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({foo: 'bar'}).to.not.equal({foo: 'bar'});\nexpect({foo: 'bar'}).to.deep.equal({foo: 'bar'});",
            "err": {},
            "isRoot": false,
            "uuid": "ec6f8dfa-28be-46d3-898e-6dfbe112cc8c",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
            "fullTitle": "chai expect .eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({foo: 'bar'}).to.eql({foo: 'bar'});\nexpect([1, 2, 3]).to.eql([1, 2, 3]);",
            "err": {},
            "isRoot": false,
            "uuid": "1091ffa5-4a79-474f-ab0d-788def5abe91",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".above(value) - Asserts that the target is greater than value.",
            "fullTitle": "chai expect .above(value) - Asserts that the target is greater than value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(10).to.be.above(5);\nexpect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);",
            "err": {},
            "isRoot": false,
            "uuid": "1f20bdf1-d6e1-4bd6-ba04-c7c6032c3388",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".least(value) - Asserts that the target is greater than or equal to value",
            "fullTitle": "chai expect .least(value) - Asserts that the target is greater than or equal to value",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(10).to.be.at.least(10);\nexpect('foo').to.have.length.of.at.least(2);\nexpect([1, 2, 3]).to.have.length.of.at.least(3);",
            "err": {},
            "isRoot": false,
            "uuid": "4023c362-7057-4983-8528-ffda693e3baa",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".below(value) - Asserts that the target is less than value.",
            "fullTitle": "chai expect .below(value) - Asserts that the target is less than value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(5).to.be.below(10);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);",
            "err": {},
            "isRoot": false,
            "uuid": "51b55626-313c-4cc6-a257-8aeb461d2d73",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".most(value) - Asserts that the target is less than or equal to value.",
            "fullTitle": "chai expect .most(value) - Asserts that the target is less than or equal to value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(5).to.be.at.most(5);\nexpect('foo').to.have.length.of.at.most(4);\nexpect([1, 2, 3]).to.have.length.of.at.most(3);",
            "err": {},
            "isRoot": false,
            "uuid": "8bfa4d44-98be-453b-92d2-8a01011d24fd",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".within(start,finish) - Asserts that the target is within a range.",
            "fullTitle": "chai expect .within(start,finish) - Asserts that the target is within a range.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(7).to.be.within(5, 10);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
            "err": {},
            "isRoot": false,
            "uuid": "b9212ec6-a37b-496e-ab71-7f672d70cc7f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".instanceof(constructor) - Asserts that the target is an instance of constructor.",
            "fullTitle": "chai expect .instanceof(constructor) - Asserts that the target is an instance of constructor.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var Tea = function (name) {\n    this.name = name;\n}, Chai = new Tea('chai');\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([1, 2, 3]).to.be.instanceof(Array);\nfunction Cat () { }\nexpect(new Cat()).to.be.an.instanceof(Cat);\nexpect([1, 2]).to.be.an.instanceof(Array);",
            "err": {},
            "isRoot": false,
            "uuid": "0f3809a3-dbba-40ea-84f4-6b91f1a967dc",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
            "fullTitle": "chai expect .property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// simple referencing\nvar obj = {foo: 'bar'};\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n// Target object deeply (but not strictly) has property `x: {a: 1}`\nexpect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\nexpect({x: {a: 1}}).to.not.have.property('x', {a: 1});\nObject.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.own.property('a', 1);\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({a: {b: [{c: 3}]}}).to.have.deep.nested.property('a.b[0]', {c: 3});\nexpect({b: 2}).to.not.have.property('a'); // Recommended\nexpect({b: 2}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 3}).to.have.property('a', 3); // Recommended\nexpect({a: 3}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 1}).to.have.property('a').that.is.a('number');",
            "err": {},
            "isRoot": false,
            "uuid": "cb95b2d3-ed10-46cd-8c45-08f405f7f1fc",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
            "fullTitle": "chai expect .own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Object.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});",
            "err": {},
            "isRoot": false,
            "uuid": "b47b50ed-35a7-4d17-a20c-6f7e633b66d5",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".ownProperty(name) - Asserts that the target has an own property name.",
            "fullTitle": "chai expect .ownProperty(name) - Asserts that the target has an own property name.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('test').to.have.ownProperty('length');",
            "err": {},
            "isRoot": false,
            "uuid": "237a990e-0107-4232-a93b-49370bc5179f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
            "fullTitle": "chai expect .ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({a: 1}).to.have.ownPropertyDescriptor('a');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: 1\n});\nexpect('test').to.have.ownPropertyDescriptor('length');\nexpect('test').to.have.ownPropertyDescriptor('length', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: 4\n});\nexpect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\nexpect('test').ownPropertyDescriptor('length').to.have.keys('configurable', 'enumerable', 'value', 'writable');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a')\n    .that.has.property('enumerable', true);",
            "err": {},
            "isRoot": false,
            "uuid": "0f620111-d9c3-43ae-b8c5-1d127525af2b",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
            "fullTitle": "chai expect .length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
            "err": {},
            "isRoot": false,
            "uuid": "72e901df-c7c2-4657-871e-38588c1dc26f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
            "fullTitle": "chai expect .lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2, 3]).to.have.lengthOf(3);\nexpect('foobar').to.have.lengthOf(6);\n// Recommended\nexpect([1, 2, 3]).to.have.lengthOf(3);\n// Not recommended\nexpect([1, 2, 3]).to.have.lengthOf.above(2);\nexpect([1, 2, 3]).to.have.lengthOf.below(4);\nexpect([1, 2, 3]).to.have.lengthOf.at.least(3);\nexpect([1, 2, 3]).to.have.lengthOf.at.most(3);\nexpect([1, 2, 3]).to.have.lengthOf.within(2,4);",
            "err": {},
            "isRoot": false,
            "uuid": "91a82c2a-99b2-4913-8a51-35fd2c38f6d5",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".match(regexp) - Asserts that the target matches a regular expression.",
            "fullTitle": "chai expect .match(regexp) - Asserts that the target matches a regular expression.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foobar').to.match(/^foo/);",
            "err": {},
            "isRoot": false,
            "uuid": "6ba3515d-43e3-4215-ab8e-2d060238ae2f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "string(string) - Asserts that the string target contains another string.",
            "fullTitle": "chai expect string(string) - Asserts that the string target contains another string.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foobar').to.have.string('bar');",
            "err": {},
            "isRoot": false,
            "uuid": "92a3535f-3686-463f-a96f-6849d2ebe5ab",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
            "fullTitle": "chai expect .keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({a: 1, b: 2}).to.have.any.keys('a', 'c');\nexpect({a: 1, b: 2}).to.have.any.keys('a');\nexpect({a: 1, b: 2}).to.contain.any.keys('b', 'c');\nexpect({a: 1, b: 2}).to.contain.any.keys(['a']);\nexpect({a: 1, b: 2}).to.contain.any.keys({'a': 6});\nexpect({a: 1, b: 2}).to.have.all.keys(['b', 'a']);\nexpect({a: 1, b: 2}).to.have.all.keys({'b': 6, 'a': 7});\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys(['b', 'a']);\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys({'b': 6});\nexpect(['x', 'y']).to.have.all.keys(0, 1);\nexpect(['x', 'y']).to.have.all.keys([0, 1]);\nexpect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\nexpect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\nexpect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\nexpect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n// Target set deeply (but not strictly) has key `{a: 1}`\nexpect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\nexpect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n// Recommended; asserts that target doesn't have any of the given keys\nexpect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n// Not recommended; asserts that target doesn't have all of the given\n// keys but may or may not have some of them\nexpect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n// Recommended; asserts that target has all the given keys\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n// Not recommended; asserts that target has at least one of the given\n// keys but may or may not have more of them\nexpect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n// Both assertions are identical\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\nexpect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');",
            "err": {},
            "isRoot": false,
            "uuid": "65288702-5489-429d-aef4-ec4b9d881df0",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
            "fullTitle": "chai expect .throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw();\nvar badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw(TypeError);\nvar err = new TypeError('Illegal salmon!');\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(err);\nexpect(badFn).to.throw(TypeError);\nexpect(badFn).to.throw(Error);\nexpect(badFn).to.throw('salmon');\nexpect(badFn).to.throw(/salmon/);\nexpect(badFn).to.throw(TypeError, 'salmon');\nexpect(badFn).to.throw(TypeError, /salmon/);\nexpect(badFn).to.throw(err, 'salmon');\nexpect(badFn).to.throw(err, /salmon/);\nvar err = new TypeError('Illegal salmon!');\nerr.code = 42;\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(TypeError).with.property('code', 42);\nvar goodFn = function () {};\nexpect(goodFn).to.not.throw();",
            "err": {},
            "isRoot": false,
            "uuid": "59a05a12-32b7-49da-adbf-51b53a04892e",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".respondTo(method) - Asserts that the object or class target will respond to a method.",
            "fullTitle": "chai expect .respondTo(method) - Asserts that the object or class target will respond to a method.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Cat () {}\nCat.prototype.meow = function () {};\nexpect(new Cat()).to.respondTo('meow');\nexpect(new Cat()).to.be.an('object').that.respondsTo('meow');\nfunction Cat () {}\nCat.prototype.meow = function () {};\nexpect(Cat).to.respondTo('meow');",
            "err": {},
            "isRoot": false,
            "uuid": "bf0baa81-ee84-4a7d-860e-336194f9a1bf",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".itself - Sets the itself flag, later used by the respondTo assertion.",
            "fullTitle": "chai expect .itself - Sets the itself flag, later used by the respondTo assertion.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Cat () {}\nCat.prototype.meow = function () {};\nCat.hiss = function () {};\nexpect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');",
            "err": {},
            "isRoot": false,
            "uuid": "66065ea0-1369-494e-85fb-fc58381ce252",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".satisfy(method) - Asserts that the target passes a given truth test.",
            "fullTitle": "chai expect .satisfy(method) - Asserts that the target passes a given truth test.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.satisfy(function (num) {\n    return num > 0;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "de82e9db-2a76-447e-aa51-6888638a9071",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
            "fullTitle": "chai expect .closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1.5).to.be.closeTo(1, 0.5);",
            "err": {},
            "isRoot": false,
            "uuid": "8dbeec3a-6cbf-4d8d-b8e4-4ee17f34e209",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
            "fullTitle": "chai expect .members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\nexpect([{a: 1}]).to.deep.include.members([{a: 1}]);\nexpect([{a: 1}]).to.have.deep.members([{a: 1}]);\nexpect([{a: 1}]).to.not.have.members([{a: 1}]);",
            "err": {},
            "isRoot": false,
            "uuid": "f7657385-fabe-4c39-98d8-42a7a9e4b324",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
            "fullTitle": "chai expect ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2]).to.have.ordered.members([1, 2])\n    .but.not.have.ordered.members([2, 1]);\n// When .include and .ordered are combined, the ordering begins at the start of both arrays.\nexpect([1, 2, 3]).to.include.ordered.members([1, 2])\n    .but.not.include.ordered.members([2, 3]);",
            "err": {},
            "isRoot": false,
            "uuid": "e3aad40b-6f56-4930-9649-032413007f76",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
            "fullTitle": "chai expect .oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('a').to.be.oneOf(['a', 'b', 'c']);\nexpect(9).to.not.be.oneOf(['z']);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);",
            "err": {},
            "isRoot": false,
            "uuid": "d9e054d7-66d3-4b96-9dae-fab6fba52cd0",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".change(function) - Asserts that a function changes an object property",
            "fullTitle": "chai expect .change(function) - Asserts that a function changes an object property",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var dots = ''\n    , addDot = function () { dots += '.'; }\n    , getDots = function () { return dots; };\n// Recommended\nexpect(getDots()).to.equal('');\naddDot();\nexpect(getDots()).to.equal('.');\n// Not recommended\nexpect(addDot).to.change(getDots);\nvar myObj = {dots: ''}\n    , addDot = function () { myObj.dots += '.'; };\n// Recommended\nexpect(myObj).to.have.property('dots', '');\naddDot();\nexpect(myObj).to.have.property('dots', '.');\n// Not recommended\nexpect(addDot).to.change(myObj, 'dots');",
            "err": {},
            "isRoot": false,
            "uuid": "36e90dca-c02e-4335-985f-0ebc2f4c92ec",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".increase(function) - Asserts that a function increases an object property",
            "fullTitle": "chai expect .increase(function) - Asserts that a function increases an object property",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var val = 1\n    , addTwo = function () { val += 2; }\n    , getVal = function () { return val; };\nexpect(addTwo).to.increase(getVal).by(2); // Recommended\nexpect(addTwo).to.increase(getVal); // Not recommended\nvar myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.increase(myObj, 'val'); // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "d8bba6e6-9d2c-432f-b9a4-e111da8c1082",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".decrease(function) - Asserts that a function decreases an object property",
            "fullTitle": "chai expect .decrease(function) - Asserts that a function decreases an object property",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var val = 1\n    , subtractTwo = function () { val -= 2; }\n    , getVal = function () { return val; };\nexpect(subtractTwo).to.decrease(getVal).by(2); // Recommended\nexpect(subtractTwo).to.decrease(getVal); // Not recommended\nvar myObj = {val: 1}\n    , subtractTwo = function () { myObj.val -= 2; };\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "fcd6d7c0-82bc-4447-9695-e6e64a8236ca",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
            "fullTitle": "chai expect .by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2);",
            "err": {},
            "isRoot": false,
            "uuid": "24d5f5c9-d26b-4a55-acee-d41338c078be",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".extensible - Asserts that the target is extensible (can have new properties added to it).",
            "fullTitle": "chai expect .extensible - Asserts that the target is extensible (can have new properties added to it).",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\nexpect({a: 1}).to.be.extensible;",
            "err": {},
            "isRoot": false,
            "uuid": "2d2c9b8e-b55a-401b-aa13-d7486c415f05",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
            "fullTitle": "chai expect .sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\nexpect(1).to.be.sealed;",
            "err": {},
            "isRoot": false,
            "uuid": "4a930909-0296-4c87-a100-0c91738de2b5",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
            "fullTitle": "chai expect .frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var frozenObject = Object.freeze({});\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\nexpect(1).to.be.frozen;",
            "err": {},
            "isRoot": false,
            "uuid": "ac386ab4-6062-4443-83fc-7d6fe06d52bf",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
            "fullTitle": "chai expect .finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.be.finite;\nexpect(Infinity).to.equal(Infinity); // Recommended\nexpect(Infinity).to.not.be.finite; // Not recommended\nexpect(-Infinity).to.equal(-Infinity); // Recommended\nexpect(-Infinity).to.not.be.finite; // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "5ba6ed39-4dbd-40a1-b722-efdf412617f0",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\001-styles-expect-chains.test.js",
        "uuid": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\GitHub\\NetSchool\\Tools\\chai\\test\\001-styles-expect-chains.test.js",
        "passes": [
          {
            "title": ".not - Negates any of assertions following in the chain.",
            "fullTitle": "chai expect .not - Negates any of assertions following in the chain.",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(function () { }).to.not.throw(Error);\nexpect(foo).to.not.be.equal('bar');\nexpect({foo: 'baz'}).to.have.property('foo')\n    .and.not.equal('bar');\nexpect({a: 1}).to.not.have.property('b');\nexpect([1, 2]).to.be.an('array')\n    .that.does.not.include(3);\n// 慎用 not 断言一个预期的,比没有预期的否定要好\nexpect(2).to.equal(2); // Recommended\nexpect(2).to.not.equal(1); // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "a1852ee7-24bb-4ea2-bf5a-3408ffa6dff7",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".deep - Sets the deep flag, later used by the equal and property assertions.",
            "fullTitle": "chai expect .deep - Sets the deep flag, later used by the equal and property assertions.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// Causes all .equal, .include, .members, .keys, and .property assertions\n        // that follow in the chain to use deep equality instead of strict (===) equality.\n        // Target object deeply (but not strictly) equals `{a: 1}`\n        expect({a: 1}).to.deep.equal({a: 1});\n        expect({a: 1}).to.not.equal({a: 1});\n        // Target array deeply (but not strictly) includes `{a: 1}`\n        expect([{a: 1}]).to.deep.include({a: 1});\n        expect([{a: 1}]).to.not.include({a: 1});\n        // Target object deeply (but not strictly) includes `x: {a: 1}`\n        expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n        expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n        // Target array deeply (but not strictly) has member `{a: 1}`\n        expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n        expect([{a: 1}]).to.not.have.members([{a: 1}]);\n        // Target set deeply (but not strictly) has key `{a: 1}`\n        expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n        expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n        // Target object deeply (but not strictly) has property `x: {a: 1}`\n        expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n        expect({x: {a: 1}}).to.not.have.property('x', {a: 1});",
            "err": {},
            "isRoot": false,
            "uuid": "63dfc865-d307-47a2-a45b-3107371fd495",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
            "fullTitle": "chai expect .nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n// If . or [] are part of an actual property name, they can be escaped by adding two backslashes before them.\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\nvar deepObj = {\n    green: {tea: 'matcha'}\n    , teas: ['chai', 'matcha', {tea: 'konacha'}]\n};\nexpect(deepObj).to.have.nested.property('green');\nexpect(deepObj).to.have.nested.property('green.tea','matcha');\nexpect(deepObj).to.have.nested.property('teas[1]','matcha');\nexpect(deepObj).to.have.nested.property('teas[2].tea','konacha');\nvar arr = [\n    ['chai', 'matcha', 'konacha']\n    , [{tea: 'chai'}\n        , {tea: 'matcha'}\n        , {tea: 'konacha'}]\n];\nexpect(arr).to.have.nested.property('[0][1]', 'matcha');\nexpect(arr).to.have.nested.property('[1][2].tea', 'konacha');",
            "err": {},
            "isRoot": false,
            "uuid": "2e51460d-7f28-4937-8436-b0ba69e78127",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
            "fullTitle": "chai expect .any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(foo).to.have.any.keys('bar', 'baz');\nexpect({a:1,b:2}).to.not.have.any.keys('c','d');",
            "err": {},
            "isRoot": false,
            "uuid": "ebc01410-c557-44cc-bb3e-787d4c79488d",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
            "fullTitle": "chai expect .all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(foo1).to.have.all.keys('bar', 'baz');\nexpect({a:1,b:2}).to.have.all.keys('a','b');",
            "err": {},
            "isRoot": false,
            "uuid": "86963c33-376c-4158-a4e7-3c16e18757fb",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
            "fullTitle": "chai expect .a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foo').to.be.a('string');\nexpect({foo: 'bar'}).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\nexpect(new Error).to.be.an('error');\nexpect(Promise.resolve()).to.be.a('promise');\nexpect(new Float32Array()).to.be.a('float32array');\nexpect(Symbol()).to.be.a('symbol');\n// language chain\nexpect(myFather).to.be.an.instanceof(Person);\n// .a supports objects\n// var myObj = {\n//     [Symbol.toStringTag]: 'myCustomType'\n// };\n// expect(myObj).to.be.a('myCustomType').but.not.an('object');\n// It’s often best to use .a to check a target’s type\n// before making more assertions on the same target.\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\nexpect([]).to.be.an('array').that.is.empty;\n// it’s often best to assert that the target is the expected type,\n// rather than asserting that it isn’t one of many unexpected types.\nexpect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.an('array'); // Not recommended\n// .a accepts an optional msg argument\n// which is a custom error message to show when the assertion fails.\n// expect(1).to.be.a('string', 'nooo why fail??');\n// expect(1, 'nooo why fail??').to.be.a('string');\n\n// .a can also be used as a language chain to improve the readability of your assertions.\nexpect({b: 2}).to.have.a.property('b');",
            "err": {},
            "isRoot": false,
            "uuid": "ab714d1a-0091-433b-82c6-e1e7757a9704",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
            "fullTitle": "chai expect .include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2, 3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({foo: 'bar', hello: 'universe'}).to.include.keys('foo');\nexpect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\nexpect(new Set([1, 2])).to.include(2);\nexpect(new Map([['a', 1], ['b', 2]])).to.include(2);\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\n// Target array deeply (but not strictly) includes `{a: 1}`\nexpect([{a: 1}]).to.deep.include({a: 1});\nexpect([{a: 1}]).to.not.include({a: 1});\n// Target object deeply (but not strictly) includes `x: {a: 1}`\nexpect({x: {a: 1}}).to.deep.include({x: {a: 1}});\nexpect({x: {a: 1}}).to.not.include({x: {a: 1}});\nObject.prototype.b = 2;\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\nexpect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\nexpect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\nexpect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\nexpect('foobar').to.not.include('taco');\nexpect([1, 2, 3]).to.not.include(4);\nexpect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\nexpect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\nexpect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\nexpect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n// expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n// expect([1, 2, 3], 'nooo why fail??').to.include(4);\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n// Target array is a superset of [1, 2] but not identical\nexpect([1, 2, 3]).to.include.members([1, 2]);\nexpect([1, 2, 3]).to.not.have.members([1, 2]);\n// Duplicates in the subset are ignored\nexpect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n// Both assertions are identical\nexpect({a: 1}).to.include.any.keys('a', 'b');\nexpect({a: 1}).to.have.any.keys('a', 'b');",
            "err": {},
            "isRoot": false,
            "uuid": "aac5002e-886e-4f68-bc40-b36066eebd9f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".ok - Asserts that the target is truthy.",
            "fullTitle": "chai expect .ok - Asserts that the target is truthy.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.be.ok; // Not recommended\nexpect(true).to.be.true; // Recommended\nexpect(true).to.be.ok; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.not.be.ok; // Not recommended\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.ok; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.be.ok; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.be.ok; // Not recommended\n// expect(false, 'nooo why fail??').to.be.ok;",
            "err": {},
            "isRoot": false,
            "uuid": "30e64a52-c0ed-4301-b2bf-477285c2a54e",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".true - Asserts that the target is true.",
            "fullTitle": "chai expect .true - Asserts that the target is true.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(true).to.be.true;\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.true; // Not recommended\nexpect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.true; // Not recommended\n// expect(false, 'nooo why fail??').to.be.true;",
            "err": {},
            "isRoot": false,
            "uuid": "0ba36833-cceb-4358-9add-54872009eda3",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".false - Asserts that the target is false.",
            "fullTitle": "chai expect .false - Asserts that the target is false.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//只有 false 等于 false\nexpect(false).to.be.false;\n//0 不是 false\nexpect(0).to.not.be.false;",
            "err": {},
            "isRoot": false,
            "uuid": "7aa5d7db-7464-4e84-8ecf-082a91b695a8",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".null - Asserts that the target is null.",
            "fullTitle": "chai expect .null - Asserts that the target is null.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(null).to.be.null;\nexpect(undefined).to.not.be.null;",
            "err": {},
            "isRoot": false,
            "uuid": "add709d3-5848-401c-94bf-e78e29383fd6",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".undefined - Asserts that the target is undefined.",
            "fullTitle": "chai expect .undefined - Asserts that the target is undefined.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;",
            "err": {},
            "isRoot": false,
            "uuid": "15acd0c2-92aa-4969-ae00-ca6d77445094",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".NaN - Asserts that the target is NaN.",
            "fullTitle": "chai expect .NaN - Asserts that the target is NaN.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(NaN).to.be.NaN;\nexpect(4).to.not.be.NaN;",
            "err": {},
            "isRoot": false,
            "uuid": "a979ea80-4903-41ca-bc52-087acb9d778c",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".exit - Asserts that the target is neither null nor undefined.",
            "fullTitle": "chai expect .exit - Asserts that the target is neither null nor undefined.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.exist; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.exist; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.exist; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.exist; // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "6e6f2eb1-a17a-403f-85ee-a3c248d106e4",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".empty - Asserts that the target’s length is 0. ",
            "fullTitle": "chai expect .empty - Asserts that the target’s length is 0. ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;\nexpect(new Set()).to.be.empty;\nexpect(new Map()).to.be.empty;\nexpect([]).to.be.an('array').that.is.empty;\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.not.be.empty; // Not recommended\nexpect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\nexpect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\nexpect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\nexpect({a: 1}).to.not.be.empty; // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "2b2af0a4-d5f7-4aa0-adca-a3d7b74fe84a",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".arguments - Asserts that the target is an arguments object.",
            "fullTitle": "chai expect .arguments - Asserts that the target is an arguments object.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function test () {\n    expect(arguments).to.be.arguments;\n}\ntest();",
            "err": {},
            "isRoot": false,
            "uuid": "9f7e5147-d212-493c-bfeb-0f6111abe968",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
            "fullTitle": "chai expect .equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({foo: 'bar'}).to.not.equal({foo: 'bar'});\nexpect({foo: 'bar'}).to.deep.equal({foo: 'bar'});",
            "err": {},
            "isRoot": false,
            "uuid": "ec6f8dfa-28be-46d3-898e-6dfbe112cc8c",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
            "fullTitle": "chai expect .eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({foo: 'bar'}).to.eql({foo: 'bar'});\nexpect([1, 2, 3]).to.eql([1, 2, 3]);",
            "err": {},
            "isRoot": false,
            "uuid": "1091ffa5-4a79-474f-ab0d-788def5abe91",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".above(value) - Asserts that the target is greater than value.",
            "fullTitle": "chai expect .above(value) - Asserts that the target is greater than value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(10).to.be.above(5);\nexpect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);",
            "err": {},
            "isRoot": false,
            "uuid": "1f20bdf1-d6e1-4bd6-ba04-c7c6032c3388",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".least(value) - Asserts that the target is greater than or equal to value",
            "fullTitle": "chai expect .least(value) - Asserts that the target is greater than or equal to value",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(10).to.be.at.least(10);\nexpect('foo').to.have.length.of.at.least(2);\nexpect([1, 2, 3]).to.have.length.of.at.least(3);",
            "err": {},
            "isRoot": false,
            "uuid": "4023c362-7057-4983-8528-ffda693e3baa",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".below(value) - Asserts that the target is less than value.",
            "fullTitle": "chai expect .below(value) - Asserts that the target is less than value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(5).to.be.below(10);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);",
            "err": {},
            "isRoot": false,
            "uuid": "51b55626-313c-4cc6-a257-8aeb461d2d73",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".most(value) - Asserts that the target is less than or equal to value.",
            "fullTitle": "chai expect .most(value) - Asserts that the target is less than or equal to value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(5).to.be.at.most(5);\nexpect('foo').to.have.length.of.at.most(4);\nexpect([1, 2, 3]).to.have.length.of.at.most(3);",
            "err": {},
            "isRoot": false,
            "uuid": "8bfa4d44-98be-453b-92d2-8a01011d24fd",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".within(start,finish) - Asserts that the target is within a range.",
            "fullTitle": "chai expect .within(start,finish) - Asserts that the target is within a range.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(7).to.be.within(5, 10);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
            "err": {},
            "isRoot": false,
            "uuid": "b9212ec6-a37b-496e-ab71-7f672d70cc7f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".instanceof(constructor) - Asserts that the target is an instance of constructor.",
            "fullTitle": "chai expect .instanceof(constructor) - Asserts that the target is an instance of constructor.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var Tea = function (name) {\n    this.name = name;\n}, Chai = new Tea('chai');\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([1, 2, 3]).to.be.instanceof(Array);\nfunction Cat () { }\nexpect(new Cat()).to.be.an.instanceof(Cat);\nexpect([1, 2]).to.be.an.instanceof(Array);",
            "err": {},
            "isRoot": false,
            "uuid": "0f3809a3-dbba-40ea-84f4-6b91f1a967dc",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
            "fullTitle": "chai expect .property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// simple referencing\nvar obj = {foo: 'bar'};\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n// Target object deeply (but not strictly) has property `x: {a: 1}`\nexpect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\nexpect({x: {a: 1}}).to.not.have.property('x', {a: 1});\nObject.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.own.property('a', 1);\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({a: {b: [{c: 3}]}}).to.have.deep.nested.property('a.b[0]', {c: 3});\nexpect({b: 2}).to.not.have.property('a'); // Recommended\nexpect({b: 2}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 3}).to.have.property('a', 3); // Recommended\nexpect({a: 3}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 1}).to.have.property('a').that.is.a('number');",
            "err": {},
            "isRoot": false,
            "uuid": "cb95b2d3-ed10-46cd-8c45-08f405f7f1fc",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
            "fullTitle": "chai expect .own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "Object.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});",
            "err": {},
            "isRoot": false,
            "uuid": "b47b50ed-35a7-4d17-a20c-6f7e633b66d5",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".ownProperty(name) - Asserts that the target has an own property name.",
            "fullTitle": "chai expect .ownProperty(name) - Asserts that the target has an own property name.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('test').to.have.ownProperty('length');",
            "err": {},
            "isRoot": false,
            "uuid": "237a990e-0107-4232-a93b-49370bc5179f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
            "fullTitle": "chai expect .ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({a: 1}).to.have.ownPropertyDescriptor('a');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: 1\n});\nexpect('test').to.have.ownPropertyDescriptor('length');\nexpect('test').to.have.ownPropertyDescriptor('length', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: 4\n});\nexpect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\nexpect('test').ownPropertyDescriptor('length').to.have.keys('configurable', 'enumerable', 'value', 'writable');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a')\n    .that.has.property('enumerable', true);",
            "err": {},
            "isRoot": false,
            "uuid": "0f620111-d9c3-43ae-b8c5-1d127525af2b",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
            "fullTitle": "chai expect .length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
            "err": {},
            "isRoot": false,
            "uuid": "72e901df-c7c2-4657-871e-38588c1dc26f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
            "fullTitle": "chai expect .lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2, 3]).to.have.lengthOf(3);\nexpect('foobar').to.have.lengthOf(6);\n// Recommended\nexpect([1, 2, 3]).to.have.lengthOf(3);\n// Not recommended\nexpect([1, 2, 3]).to.have.lengthOf.above(2);\nexpect([1, 2, 3]).to.have.lengthOf.below(4);\nexpect([1, 2, 3]).to.have.lengthOf.at.least(3);\nexpect([1, 2, 3]).to.have.lengthOf.at.most(3);\nexpect([1, 2, 3]).to.have.lengthOf.within(2,4);",
            "err": {},
            "isRoot": false,
            "uuid": "91a82c2a-99b2-4913-8a51-35fd2c38f6d5",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".match(regexp) - Asserts that the target matches a regular expression.",
            "fullTitle": "chai expect .match(regexp) - Asserts that the target matches a regular expression.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foobar').to.match(/^foo/);",
            "err": {},
            "isRoot": false,
            "uuid": "6ba3515d-43e3-4215-ab8e-2d060238ae2f",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "string(string) - Asserts that the string target contains another string.",
            "fullTitle": "chai expect string(string) - Asserts that the string target contains another string.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('foobar').to.have.string('bar');",
            "err": {},
            "isRoot": false,
            "uuid": "92a3535f-3686-463f-a96f-6849d2ebe5ab",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
            "fullTitle": "chai expect .keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect({a: 1, b: 2}).to.have.any.keys('a', 'c');\nexpect({a: 1, b: 2}).to.have.any.keys('a');\nexpect({a: 1, b: 2}).to.contain.any.keys('b', 'c');\nexpect({a: 1, b: 2}).to.contain.any.keys(['a']);\nexpect({a: 1, b: 2}).to.contain.any.keys({'a': 6});\nexpect({a: 1, b: 2}).to.have.all.keys(['b', 'a']);\nexpect({a: 1, b: 2}).to.have.all.keys({'b': 6, 'a': 7});\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys(['b', 'a']);\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys({'b': 6});\nexpect(['x', 'y']).to.have.all.keys(0, 1);\nexpect(['x', 'y']).to.have.all.keys([0, 1]);\nexpect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\nexpect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\nexpect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\nexpect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n// Target set deeply (but not strictly) has key `{a: 1}`\nexpect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\nexpect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n// Recommended; asserts that target doesn't have any of the given keys\nexpect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n// Not recommended; asserts that target doesn't have all of the given\n// keys but may or may not have some of them\nexpect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n// Recommended; asserts that target has all the given keys\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n// Not recommended; asserts that target has at least one of the given\n// keys but may or may not have more of them\nexpect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n// Both assertions are identical\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\nexpect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');",
            "err": {},
            "isRoot": false,
            "uuid": "65288702-5489-429d-aef4-ec4b9d881df0",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
            "fullTitle": "chai expect .throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw();\nvar badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw(TypeError);\nvar err = new TypeError('Illegal salmon!');\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(err);\nexpect(badFn).to.throw(TypeError);\nexpect(badFn).to.throw(Error);\nexpect(badFn).to.throw('salmon');\nexpect(badFn).to.throw(/salmon/);\nexpect(badFn).to.throw(TypeError, 'salmon');\nexpect(badFn).to.throw(TypeError, /salmon/);\nexpect(badFn).to.throw(err, 'salmon');\nexpect(badFn).to.throw(err, /salmon/);\nvar err = new TypeError('Illegal salmon!');\nerr.code = 42;\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(TypeError).with.property('code', 42);\nvar goodFn = function () {};\nexpect(goodFn).to.not.throw();",
            "err": {},
            "isRoot": false,
            "uuid": "59a05a12-32b7-49da-adbf-51b53a04892e",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".respondTo(method) - Asserts that the object or class target will respond to a method.",
            "fullTitle": "chai expect .respondTo(method) - Asserts that the object or class target will respond to a method.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Cat () {}\nCat.prototype.meow = function () {};\nexpect(new Cat()).to.respondTo('meow');\nexpect(new Cat()).to.be.an('object').that.respondsTo('meow');\nfunction Cat () {}\nCat.prototype.meow = function () {};\nexpect(Cat).to.respondTo('meow');",
            "err": {},
            "isRoot": false,
            "uuid": "bf0baa81-ee84-4a7d-860e-336194f9a1bf",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".itself - Sets the itself flag, later used by the respondTo assertion.",
            "fullTitle": "chai expect .itself - Sets the itself flag, later used by the respondTo assertion.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "function Cat () {}\nCat.prototype.meow = function () {};\nCat.hiss = function () {};\nexpect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');",
            "err": {},
            "isRoot": false,
            "uuid": "66065ea0-1369-494e-85fb-fc58381ce252",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".satisfy(method) - Asserts that the target passes a given truth test.",
            "fullTitle": "chai expect .satisfy(method) - Asserts that the target passes a given truth test.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.satisfy(function (num) {\n    return num > 0;\n});",
            "err": {},
            "isRoot": false,
            "uuid": "de82e9db-2a76-447e-aa51-6888638a9071",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
            "fullTitle": "chai expect .closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1.5).to.be.closeTo(1, 0.5);",
            "err": {},
            "isRoot": false,
            "uuid": "8dbeec3a-6cbf-4d8d-b8e4-4ee17f34e209",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
            "fullTitle": "chai expect .members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\nexpect([{a: 1}]).to.deep.include.members([{a: 1}]);\nexpect([{a: 1}]).to.have.deep.members([{a: 1}]);\nexpect([{a: 1}]).to.not.have.members([{a: 1}]);",
            "err": {},
            "isRoot": false,
            "uuid": "f7657385-fabe-4c39-98d8-42a7a9e4b324",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
            "fullTitle": "chai expect ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect([1, 2]).to.have.ordered.members([1, 2])\n    .but.not.have.ordered.members([2, 1]);\n// When .include and .ordered are combined, the ordering begins at the start of both arrays.\nexpect([1, 2, 3]).to.include.ordered.members([1, 2])\n    .but.not.include.ordered.members([2, 3]);",
            "err": {},
            "isRoot": false,
            "uuid": "e3aad40b-6f56-4930-9649-032413007f76",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
            "fullTitle": "chai expect .oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect('a').to.be.oneOf(['a', 'b', 'c']);\nexpect(9).to.not.be.oneOf(['z']);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);",
            "err": {},
            "isRoot": false,
            "uuid": "d9e054d7-66d3-4b96-9dae-fab6fba52cd0",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".change(function) - Asserts that a function changes an object property",
            "fullTitle": "chai expect .change(function) - Asserts that a function changes an object property",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var dots = ''\n    , addDot = function () { dots += '.'; }\n    , getDots = function () { return dots; };\n// Recommended\nexpect(getDots()).to.equal('');\naddDot();\nexpect(getDots()).to.equal('.');\n// Not recommended\nexpect(addDot).to.change(getDots);\nvar myObj = {dots: ''}\n    , addDot = function () { myObj.dots += '.'; };\n// Recommended\nexpect(myObj).to.have.property('dots', '');\naddDot();\nexpect(myObj).to.have.property('dots', '.');\n// Not recommended\nexpect(addDot).to.change(myObj, 'dots');",
            "err": {},
            "isRoot": false,
            "uuid": "36e90dca-c02e-4335-985f-0ebc2f4c92ec",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".increase(function) - Asserts that a function increases an object property",
            "fullTitle": "chai expect .increase(function) - Asserts that a function increases an object property",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var val = 1\n    , addTwo = function () { val += 2; }\n    , getVal = function () { return val; };\nexpect(addTwo).to.increase(getVal).by(2); // Recommended\nexpect(addTwo).to.increase(getVal); // Not recommended\nvar myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.increase(myObj, 'val'); // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "d8bba6e6-9d2c-432f-b9a4-e111da8c1082",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".decrease(function) - Asserts that a function decreases an object property",
            "fullTitle": "chai expect .decrease(function) - Asserts that a function decreases an object property",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var val = 1\n    , subtractTwo = function () { val -= 2; }\n    , getVal = function () { return val; };\nexpect(subtractTwo).to.decrease(getVal).by(2); // Recommended\nexpect(subtractTwo).to.decrease(getVal); // Not recommended\nvar myObj = {val: 1}\n    , subtractTwo = function () { myObj.val -= 2; };\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "fcd6d7c0-82bc-4447-9695-e6e64a8236ca",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
            "fullTitle": "chai expect .by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2);",
            "err": {},
            "isRoot": false,
            "uuid": "24d5f5c9-d26b-4a55-acee-d41338c078be",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".extensible - Asserts that the target is extensible (can have new properties added to it).",
            "fullTitle": "chai expect .extensible - Asserts that the target is extensible (can have new properties added to it).",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\nexpect({a: 1}).to.be.extensible;",
            "err": {},
            "isRoot": false,
            "uuid": "2d2c9b8e-b55a-401b-aa13-d7486c415f05",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
            "fullTitle": "chai expect .sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\nexpect(1).to.be.sealed;",
            "err": {},
            "isRoot": false,
            "uuid": "4a930909-0296-4c87-a100-0c91738de2b5",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
            "fullTitle": "chai expect .frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
            "timedOut": false,
            "duration": 10,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var frozenObject = Object.freeze({});\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\nexpect(1).to.be.frozen;",
            "err": {},
            "isRoot": false,
            "uuid": "ac386ab4-6062-4443-83fc-7d6fe06d52bf",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": ".finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
            "fullTitle": "chai expect .finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(1).to.be.finite;\nexpect(Infinity).to.equal(Infinity); // Recommended\nexpect(Infinity).to.not.be.finite; // Not recommended\nexpect(-Infinity).to.equal(-Infinity); // Recommended\nexpect(-Infinity).to.not.be.finite; // Not recommended",
            "err": {},
            "isRoot": false,
            "uuid": "5ba6ed39-4dbd-40a1-b722-efdf412617f0",
            "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 49,
        "totalPasses": 49,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 50,
        "rootEmpty": false
      },
      {
        "title": "Plugin Utilities",
        "suites": [],
        "tests": [
          {
            "title": "addChainableMethod (ctx, name, method, chainingBehavior)",
            "fullTitle": "Plugin Utilities addChainableMethod (ctx, name, method, chainingBehavior)",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "cf8a0488-856c-4b3d-bd54-b711bea1c3f9",
            "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "flag usage",
            "fullTitle": "Plugin Utilities flag usage",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "f1486a89-b4b4-4ce5-8641-91c1ef4f26a9",
            "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [
          {
            "title": "addChainableMethod (ctx, name, method, chainingBehavior)",
            "fullTitle": "Plugin Utilities addChainableMethod (ctx, name, method, chainingBehavior)",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "cf8a0488-856c-4b3d-bd54-b711bea1c3f9",
            "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "flag usage",
            "fullTitle": "Plugin Utilities flag usage",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": true,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "f1486a89-b4b4-4ce5-8641-91c1ef4f26a9",
            "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
            "isHook": false,
            "skipped": false
          }
        ],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\002-plugin-utilities.test.js",
        "uuid": "aad2b754-6a5d-4070-875c-e2381ae836b2",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "F:\\GitHub\\NetSchool\\Tools\\chai\\test\\002-plugin-utilities.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 2,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 2,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": true,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "14ed6a25-cf0e-490a-a261-e120189e0946",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": ".not - Negates any of assertions following in the chain.",
      "fullTitle": "chai expect .not - Negates any of assertions following in the chain.",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(function () { }).to.not.throw(Error);\nexpect(foo).to.not.be.equal('bar');\nexpect({foo: 'baz'}).to.have.property('foo')\n    .and.not.equal('bar');\nexpect({a: 1}).to.not.have.property('b');\nexpect([1, 2]).to.be.an('array')\n    .that.does.not.include(3);\n// 慎用 not 断言一个预期的,比没有预期的否定要好\nexpect(2).to.equal(2); // Recommended\nexpect(2).to.not.equal(1); // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "a1852ee7-24bb-4ea2-bf5a-3408ffa6dff7",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".deep - Sets the deep flag, later used by the equal and property assertions.",
      "fullTitle": "chai expect .deep - Sets the deep flag, later used by the equal and property assertions.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Causes all .equal, .include, .members, .keys, and .property assertions\n        // that follow in the chain to use deep equality instead of strict (===) equality.\n        // Target object deeply (but not strictly) equals `{a: 1}`\n        expect({a: 1}).to.deep.equal({a: 1});\n        expect({a: 1}).to.not.equal({a: 1});\n        // Target array deeply (but not strictly) includes `{a: 1}`\n        expect([{a: 1}]).to.deep.include({a: 1});\n        expect([{a: 1}]).to.not.include({a: 1});\n        // Target object deeply (but not strictly) includes `x: {a: 1}`\n        expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n        expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n        // Target array deeply (but not strictly) has member `{a: 1}`\n        expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n        expect([{a: 1}]).to.not.have.members([{a: 1}]);\n        // Target set deeply (but not strictly) has key `{a: 1}`\n        expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n        expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n        // Target object deeply (but not strictly) has property `x: {a: 1}`\n        expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n        expect({x: {a: 1}}).to.not.have.property('x', {a: 1});",
      "err": {},
      "isRoot": false,
      "uuid": "63dfc865-d307-47a2-a45b-3107371fd495",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
      "fullTitle": "chai expect .nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n// If . or [] are part of an actual property name, they can be escaped by adding two backslashes before them.\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\nvar deepObj = {\n    green: {tea: 'matcha'}\n    , teas: ['chai', 'matcha', {tea: 'konacha'}]\n};\nexpect(deepObj).to.have.nested.property('green');\nexpect(deepObj).to.have.nested.property('green.tea','matcha');\nexpect(deepObj).to.have.nested.property('teas[1]','matcha');\nexpect(deepObj).to.have.nested.property('teas[2].tea','konacha');\nvar arr = [\n    ['chai', 'matcha', 'konacha']\n    , [{tea: 'chai'}\n        , {tea: 'matcha'}\n        , {tea: 'konacha'}]\n];\nexpect(arr).to.have.nested.property('[0][1]', 'matcha');\nexpect(arr).to.have.nested.property('[1][2].tea', 'konacha');",
      "err": {},
      "isRoot": false,
      "uuid": "2e51460d-7f28-4937-8436-b0ba69e78127",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
      "fullTitle": "chai expect .any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(foo).to.have.any.keys('bar', 'baz');\nexpect({a:1,b:2}).to.not.have.any.keys('c','d');",
      "err": {},
      "isRoot": false,
      "uuid": "ebc01410-c557-44cc-bb3e-787d4c79488d",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
      "fullTitle": "chai expect .all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(foo1).to.have.all.keys('bar', 'baz');\nexpect({a:1,b:2}).to.have.all.keys('a','b');",
      "err": {},
      "isRoot": false,
      "uuid": "86963c33-376c-4158-a4e7-3c16e18757fb",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
      "fullTitle": "chai expect .a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foo').to.be.a('string');\nexpect({foo: 'bar'}).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\nexpect(new Error).to.be.an('error');\nexpect(Promise.resolve()).to.be.a('promise');\nexpect(new Float32Array()).to.be.a('float32array');\nexpect(Symbol()).to.be.a('symbol');\n// language chain\nexpect(myFather).to.be.an.instanceof(Person);\n// .a supports objects\n// var myObj = {\n//     [Symbol.toStringTag]: 'myCustomType'\n// };\n// expect(myObj).to.be.a('myCustomType').but.not.an('object');\n// It’s often best to use .a to check a target’s type\n// before making more assertions on the same target.\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\nexpect([]).to.be.an('array').that.is.empty;\n// it’s often best to assert that the target is the expected type,\n// rather than asserting that it isn’t one of many unexpected types.\nexpect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.an('array'); // Not recommended\n// .a accepts an optional msg argument\n// which is a custom error message to show when the assertion fails.\n// expect(1).to.be.a('string', 'nooo why fail??');\n// expect(1, 'nooo why fail??').to.be.a('string');\n\n// .a can also be used as a language chain to improve the readability of your assertions.\nexpect({b: 2}).to.have.a.property('b');",
      "err": {},
      "isRoot": false,
      "uuid": "ab714d1a-0091-433b-82c6-e1e7757a9704",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
      "fullTitle": "chai expect .include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2, 3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({foo: 'bar', hello: 'universe'}).to.include.keys('foo');\nexpect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\nexpect(new Set([1, 2])).to.include(2);\nexpect(new Map([['a', 1], ['b', 2]])).to.include(2);\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\n// Target array deeply (but not strictly) includes `{a: 1}`\nexpect([{a: 1}]).to.deep.include({a: 1});\nexpect([{a: 1}]).to.not.include({a: 1});\n// Target object deeply (but not strictly) includes `x: {a: 1}`\nexpect({x: {a: 1}}).to.deep.include({x: {a: 1}});\nexpect({x: {a: 1}}).to.not.include({x: {a: 1}});\nObject.prototype.b = 2;\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\nexpect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\nexpect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\nexpect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\nexpect('foobar').to.not.include('taco');\nexpect([1, 2, 3]).to.not.include(4);\nexpect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\nexpect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\nexpect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\nexpect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n// expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n// expect([1, 2, 3], 'nooo why fail??').to.include(4);\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n// Target array is a superset of [1, 2] but not identical\nexpect([1, 2, 3]).to.include.members([1, 2]);\nexpect([1, 2, 3]).to.not.have.members([1, 2]);\n// Duplicates in the subset are ignored\nexpect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n// Both assertions are identical\nexpect({a: 1}).to.include.any.keys('a', 'b');\nexpect({a: 1}).to.have.any.keys('a', 'b');",
      "err": {},
      "isRoot": false,
      "uuid": "aac5002e-886e-4f68-bc40-b36066eebd9f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".ok - Asserts that the target is truthy.",
      "fullTitle": "chai expect .ok - Asserts that the target is truthy.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.be.ok; // Not recommended\nexpect(true).to.be.true; // Recommended\nexpect(true).to.be.ok; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.not.be.ok; // Not recommended\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.ok; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.be.ok; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.be.ok; // Not recommended\n// expect(false, 'nooo why fail??').to.be.ok;",
      "err": {},
      "isRoot": false,
      "uuid": "30e64a52-c0ed-4301-b2bf-477285c2a54e",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".true - Asserts that the target is true.",
      "fullTitle": "chai expect .true - Asserts that the target is true.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(true).to.be.true;\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.true; // Not recommended\nexpect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.true; // Not recommended\n// expect(false, 'nooo why fail??').to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "0ba36833-cceb-4358-9add-54872009eda3",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".false - Asserts that the target is false.",
      "fullTitle": "chai expect .false - Asserts that the target is false.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//只有 false 等于 false\nexpect(false).to.be.false;\n//0 不是 false\nexpect(0).to.not.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "7aa5d7db-7464-4e84-8ecf-082a91b695a8",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".null - Asserts that the target is null.",
      "fullTitle": "chai expect .null - Asserts that the target is null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(null).to.be.null;\nexpect(undefined).to.not.be.null;",
      "err": {},
      "isRoot": false,
      "uuid": "add709d3-5848-401c-94bf-e78e29383fd6",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".undefined - Asserts that the target is undefined.",
      "fullTitle": "chai expect .undefined - Asserts that the target is undefined.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "15acd0c2-92aa-4969-ae00-ca6d77445094",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".NaN - Asserts that the target is NaN.",
      "fullTitle": "chai expect .NaN - Asserts that the target is NaN.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(NaN).to.be.NaN;\nexpect(4).to.not.be.NaN;",
      "err": {},
      "isRoot": false,
      "uuid": "a979ea80-4903-41ca-bc52-087acb9d778c",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".exit - Asserts that the target is neither null nor undefined.",
      "fullTitle": "chai expect .exit - Asserts that the target is neither null nor undefined.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.exist; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.exist; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.exist; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.exist; // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "6e6f2eb1-a17a-403f-85ee-a3c248d106e4",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".empty - Asserts that the target’s length is 0. ",
      "fullTitle": "chai expect .empty - Asserts that the target’s length is 0. ",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;\nexpect(new Set()).to.be.empty;\nexpect(new Map()).to.be.empty;\nexpect([]).to.be.an('array').that.is.empty;\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.not.be.empty; // Not recommended\nexpect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\nexpect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\nexpect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\nexpect({a: 1}).to.not.be.empty; // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "2b2af0a4-d5f7-4aa0-adca-a3d7b74fe84a",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".arguments - Asserts that the target is an arguments object.",
      "fullTitle": "chai expect .arguments - Asserts that the target is an arguments object.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function test () {\n    expect(arguments).to.be.arguments;\n}\ntest();",
      "err": {},
      "isRoot": false,
      "uuid": "9f7e5147-d212-493c-bfeb-0f6111abe968",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
      "fullTitle": "chai expect .equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({foo: 'bar'}).to.not.equal({foo: 'bar'});\nexpect({foo: 'bar'}).to.deep.equal({foo: 'bar'});",
      "err": {},
      "isRoot": false,
      "uuid": "ec6f8dfa-28be-46d3-898e-6dfbe112cc8c",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
      "fullTitle": "chai expect .eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({foo: 'bar'}).to.eql({foo: 'bar'});\nexpect([1, 2, 3]).to.eql([1, 2, 3]);",
      "err": {},
      "isRoot": false,
      "uuid": "1091ffa5-4a79-474f-ab0d-788def5abe91",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".above(value) - Asserts that the target is greater than value.",
      "fullTitle": "chai expect .above(value) - Asserts that the target is greater than value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(10).to.be.above(5);\nexpect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);",
      "err": {},
      "isRoot": false,
      "uuid": "1f20bdf1-d6e1-4bd6-ba04-c7c6032c3388",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".least(value) - Asserts that the target is greater than or equal to value",
      "fullTitle": "chai expect .least(value) - Asserts that the target is greater than or equal to value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(10).to.be.at.least(10);\nexpect('foo').to.have.length.of.at.least(2);\nexpect([1, 2, 3]).to.have.length.of.at.least(3);",
      "err": {},
      "isRoot": false,
      "uuid": "4023c362-7057-4983-8528-ffda693e3baa",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".below(value) - Asserts that the target is less than value.",
      "fullTitle": "chai expect .below(value) - Asserts that the target is less than value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(5).to.be.below(10);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);",
      "err": {},
      "isRoot": false,
      "uuid": "51b55626-313c-4cc6-a257-8aeb461d2d73",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".most(value) - Asserts that the target is less than or equal to value.",
      "fullTitle": "chai expect .most(value) - Asserts that the target is less than or equal to value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(5).to.be.at.most(5);\nexpect('foo').to.have.length.of.at.most(4);\nexpect([1, 2, 3]).to.have.length.of.at.most(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8bfa4d44-98be-453b-92d2-8a01011d24fd",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".within(start,finish) - Asserts that the target is within a range.",
      "fullTitle": "chai expect .within(start,finish) - Asserts that the target is within a range.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(7).to.be.within(5, 10);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
      "err": {},
      "isRoot": false,
      "uuid": "b9212ec6-a37b-496e-ab71-7f672d70cc7f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".instanceof(constructor) - Asserts that the target is an instance of constructor.",
      "fullTitle": "chai expect .instanceof(constructor) - Asserts that the target is an instance of constructor.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var Tea = function (name) {\n    this.name = name;\n}, Chai = new Tea('chai');\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([1, 2, 3]).to.be.instanceof(Array);\nfunction Cat () { }\nexpect(new Cat()).to.be.an.instanceof(Cat);\nexpect([1, 2]).to.be.an.instanceof(Array);",
      "err": {},
      "isRoot": false,
      "uuid": "0f3809a3-dbba-40ea-84f4-6b91f1a967dc",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
      "fullTitle": "chai expect .property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// simple referencing\nvar obj = {foo: 'bar'};\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n// Target object deeply (but not strictly) has property `x: {a: 1}`\nexpect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\nexpect({x: {a: 1}}).to.not.have.property('x', {a: 1});\nObject.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.own.property('a', 1);\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({a: {b: [{c: 3}]}}).to.have.deep.nested.property('a.b[0]', {c: 3});\nexpect({b: 2}).to.not.have.property('a'); // Recommended\nexpect({b: 2}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 3}).to.have.property('a', 3); // Recommended\nexpect({a: 3}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 1}).to.have.property('a').that.is.a('number');",
      "err": {},
      "isRoot": false,
      "uuid": "cb95b2d3-ed10-46cd-8c45-08f405f7f1fc",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
      "fullTitle": "chai expect .own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Object.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});",
      "err": {},
      "isRoot": false,
      "uuid": "b47b50ed-35a7-4d17-a20c-6f7e633b66d5",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".ownProperty(name) - Asserts that the target has an own property name.",
      "fullTitle": "chai expect .ownProperty(name) - Asserts that the target has an own property name.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('test').to.have.ownProperty('length');",
      "err": {},
      "isRoot": false,
      "uuid": "237a990e-0107-4232-a93b-49370bc5179f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
      "fullTitle": "chai expect .ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({a: 1}).to.have.ownPropertyDescriptor('a');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: 1\n});\nexpect('test').to.have.ownPropertyDescriptor('length');\nexpect('test').to.have.ownPropertyDescriptor('length', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: 4\n});\nexpect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\nexpect('test').ownPropertyDescriptor('length').to.have.keys('configurable', 'enumerable', 'value', 'writable');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a')\n    .that.has.property('enumerable', true);",
      "err": {},
      "isRoot": false,
      "uuid": "0f620111-d9c3-43ae-b8c5-1d127525af2b",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
      "fullTitle": "chai expect .length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
      "err": {},
      "isRoot": false,
      "uuid": "72e901df-c7c2-4657-871e-38588c1dc26f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
      "fullTitle": "chai expect .lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2, 3]).to.have.lengthOf(3);\nexpect('foobar').to.have.lengthOf(6);\n// Recommended\nexpect([1, 2, 3]).to.have.lengthOf(3);\n// Not recommended\nexpect([1, 2, 3]).to.have.lengthOf.above(2);\nexpect([1, 2, 3]).to.have.lengthOf.below(4);\nexpect([1, 2, 3]).to.have.lengthOf.at.least(3);\nexpect([1, 2, 3]).to.have.lengthOf.at.most(3);\nexpect([1, 2, 3]).to.have.lengthOf.within(2,4);",
      "err": {},
      "isRoot": false,
      "uuid": "91a82c2a-99b2-4913-8a51-35fd2c38f6d5",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".match(regexp) - Asserts that the target matches a regular expression.",
      "fullTitle": "chai expect .match(regexp) - Asserts that the target matches a regular expression.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foobar').to.match(/^foo/);",
      "err": {},
      "isRoot": false,
      "uuid": "6ba3515d-43e3-4215-ab8e-2d060238ae2f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "string(string) - Asserts that the string target contains another string.",
      "fullTitle": "chai expect string(string) - Asserts that the string target contains another string.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foobar').to.have.string('bar');",
      "err": {},
      "isRoot": false,
      "uuid": "92a3535f-3686-463f-a96f-6849d2ebe5ab",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
      "fullTitle": "chai expect .keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({a: 1, b: 2}).to.have.any.keys('a', 'c');\nexpect({a: 1, b: 2}).to.have.any.keys('a');\nexpect({a: 1, b: 2}).to.contain.any.keys('b', 'c');\nexpect({a: 1, b: 2}).to.contain.any.keys(['a']);\nexpect({a: 1, b: 2}).to.contain.any.keys({'a': 6});\nexpect({a: 1, b: 2}).to.have.all.keys(['b', 'a']);\nexpect({a: 1, b: 2}).to.have.all.keys({'b': 6, 'a': 7});\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys(['b', 'a']);\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys({'b': 6});\nexpect(['x', 'y']).to.have.all.keys(0, 1);\nexpect(['x', 'y']).to.have.all.keys([0, 1]);\nexpect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\nexpect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\nexpect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\nexpect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n// Target set deeply (but not strictly) has key `{a: 1}`\nexpect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\nexpect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n// Recommended; asserts that target doesn't have any of the given keys\nexpect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n// Not recommended; asserts that target doesn't have all of the given\n// keys but may or may not have some of them\nexpect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n// Recommended; asserts that target has all the given keys\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n// Not recommended; asserts that target has at least one of the given\n// keys but may or may not have more of them\nexpect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n// Both assertions are identical\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\nexpect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');",
      "err": {},
      "isRoot": false,
      "uuid": "65288702-5489-429d-aef4-ec4b9d881df0",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
      "fullTitle": "chai expect .throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw();\nvar badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw(TypeError);\nvar err = new TypeError('Illegal salmon!');\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(err);\nexpect(badFn).to.throw(TypeError);\nexpect(badFn).to.throw(Error);\nexpect(badFn).to.throw('salmon');\nexpect(badFn).to.throw(/salmon/);\nexpect(badFn).to.throw(TypeError, 'salmon');\nexpect(badFn).to.throw(TypeError, /salmon/);\nexpect(badFn).to.throw(err, 'salmon');\nexpect(badFn).to.throw(err, /salmon/);\nvar err = new TypeError('Illegal salmon!');\nerr.code = 42;\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(TypeError).with.property('code', 42);\nvar goodFn = function () {};\nexpect(goodFn).to.not.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "59a05a12-32b7-49da-adbf-51b53a04892e",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".respondTo(method) - Asserts that the object or class target will respond to a method.",
      "fullTitle": "chai expect .respondTo(method) - Asserts that the object or class target will respond to a method.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Cat () {}\nCat.prototype.meow = function () {};\nexpect(new Cat()).to.respondTo('meow');\nexpect(new Cat()).to.be.an('object').that.respondsTo('meow');\nfunction Cat () {}\nCat.prototype.meow = function () {};\nexpect(Cat).to.respondTo('meow');",
      "err": {},
      "isRoot": false,
      "uuid": "bf0baa81-ee84-4a7d-860e-336194f9a1bf",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".itself - Sets the itself flag, later used by the respondTo assertion.",
      "fullTitle": "chai expect .itself - Sets the itself flag, later used by the respondTo assertion.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Cat () {}\nCat.prototype.meow = function () {};\nCat.hiss = function () {};\nexpect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');",
      "err": {},
      "isRoot": false,
      "uuid": "66065ea0-1369-494e-85fb-fc58381ce252",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".satisfy(method) - Asserts that the target passes a given truth test.",
      "fullTitle": "chai expect .satisfy(method) - Asserts that the target passes a given truth test.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.satisfy(function (num) {\n    return num > 0;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "de82e9db-2a76-447e-aa51-6888638a9071",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
      "fullTitle": "chai expect .closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1.5).to.be.closeTo(1, 0.5);",
      "err": {},
      "isRoot": false,
      "uuid": "8dbeec3a-6cbf-4d8d-b8e4-4ee17f34e209",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
      "fullTitle": "chai expect .members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\nexpect([{a: 1}]).to.deep.include.members([{a: 1}]);\nexpect([{a: 1}]).to.have.deep.members([{a: 1}]);\nexpect([{a: 1}]).to.not.have.members([{a: 1}]);",
      "err": {},
      "isRoot": false,
      "uuid": "f7657385-fabe-4c39-98d8-42a7a9e4b324",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
      "fullTitle": "chai expect ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2]).to.have.ordered.members([1, 2])\n    .but.not.have.ordered.members([2, 1]);\n// When .include and .ordered are combined, the ordering begins at the start of both arrays.\nexpect([1, 2, 3]).to.include.ordered.members([1, 2])\n    .but.not.include.ordered.members([2, 3]);",
      "err": {},
      "isRoot": false,
      "uuid": "e3aad40b-6f56-4930-9649-032413007f76",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
      "fullTitle": "chai expect .oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('a').to.be.oneOf(['a', 'b', 'c']);\nexpect(9).to.not.be.oneOf(['z']);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);",
      "err": {},
      "isRoot": false,
      "uuid": "d9e054d7-66d3-4b96-9dae-fab6fba52cd0",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".change(function) - Asserts that a function changes an object property",
      "fullTitle": "chai expect .change(function) - Asserts that a function changes an object property",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var dots = ''\n    , addDot = function () { dots += '.'; }\n    , getDots = function () { return dots; };\n// Recommended\nexpect(getDots()).to.equal('');\naddDot();\nexpect(getDots()).to.equal('.');\n// Not recommended\nexpect(addDot).to.change(getDots);\nvar myObj = {dots: ''}\n    , addDot = function () { myObj.dots += '.'; };\n// Recommended\nexpect(myObj).to.have.property('dots', '');\naddDot();\nexpect(myObj).to.have.property('dots', '.');\n// Not recommended\nexpect(addDot).to.change(myObj, 'dots');",
      "err": {},
      "isRoot": false,
      "uuid": "36e90dca-c02e-4335-985f-0ebc2f4c92ec",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".increase(function) - Asserts that a function increases an object property",
      "fullTitle": "chai expect .increase(function) - Asserts that a function increases an object property",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var val = 1\n    , addTwo = function () { val += 2; }\n    , getVal = function () { return val; };\nexpect(addTwo).to.increase(getVal).by(2); // Recommended\nexpect(addTwo).to.increase(getVal); // Not recommended\nvar myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.increase(myObj, 'val'); // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "d8bba6e6-9d2c-432f-b9a4-e111da8c1082",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".decrease(function) - Asserts that a function decreases an object property",
      "fullTitle": "chai expect .decrease(function) - Asserts that a function decreases an object property",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var val = 1\n    , subtractTwo = function () { val -= 2; }\n    , getVal = function () { return val; };\nexpect(subtractTwo).to.decrease(getVal).by(2); // Recommended\nexpect(subtractTwo).to.decrease(getVal); // Not recommended\nvar myObj = {val: 1}\n    , subtractTwo = function () { myObj.val -= 2; };\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "fcd6d7c0-82bc-4447-9695-e6e64a8236ca",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
      "fullTitle": "chai expect .by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2);",
      "err": {},
      "isRoot": false,
      "uuid": "24d5f5c9-d26b-4a55-acee-d41338c078be",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".extensible - Asserts that the target is extensible (can have new properties added to it).",
      "fullTitle": "chai expect .extensible - Asserts that the target is extensible (can have new properties added to it).",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\nexpect({a: 1}).to.be.extensible;",
      "err": {},
      "isRoot": false,
      "uuid": "2d2c9b8e-b55a-401b-aa13-d7486c415f05",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
      "fullTitle": "chai expect .sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\nexpect(1).to.be.sealed;",
      "err": {},
      "isRoot": false,
      "uuid": "4a930909-0296-4c87-a100-0c91738de2b5",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
      "fullTitle": "chai expect .frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var frozenObject = Object.freeze({});\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\nexpect(1).to.be.frozen;",
      "err": {},
      "isRoot": false,
      "uuid": "ac386ab4-6062-4443-83fc-7d6fe06d52bf",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
      "fullTitle": "chai expect .finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.be.finite;\nexpect(Infinity).to.equal(Infinity); // Recommended\nexpect(Infinity).to.not.be.finite; // Not recommended\nexpect(-Infinity).to.equal(-Infinity); // Recommended\nexpect(-Infinity).to.not.be.finite; // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "5ba6ed39-4dbd-40a1-b722-efdf412617f0",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "addChainableMethod (ctx, name, method, chainingBehavior)",
      "fullTitle": "Plugin Utilities addChainableMethod (ctx, name, method, chainingBehavior)",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "cf8a0488-856c-4b3d-bd54-b711bea1c3f9",
      "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "flag usage",
      "fullTitle": "Plugin Utilities flag usage",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "f1486a89-b4b4-4ce5-8641-91c1ef4f26a9",
      "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [
    {
      "title": "addChainableMethod (ctx, name, method, chainingBehavior)",
      "fullTitle": "Plugin Utilities addChainableMethod (ctx, name, method, chainingBehavior)",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "cf8a0488-856c-4b3d-bd54-b711bea1c3f9",
      "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "flag usage",
      "fullTitle": "Plugin Utilities flag usage",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "f1486a89-b4b4-4ce5-8641-91c1ef4f26a9",
      "parentUUID": "aad2b754-6a5d-4070-875c-e2381ae836b2",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPasses": [
    {
      "title": ".not - Negates any of assertions following in the chain.",
      "fullTitle": "chai expect .not - Negates any of assertions following in the chain.",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(function () { }).to.not.throw(Error);\nexpect(foo).to.not.be.equal('bar');\nexpect({foo: 'baz'}).to.have.property('foo')\n    .and.not.equal('bar');\nexpect({a: 1}).to.not.have.property('b');\nexpect([1, 2]).to.be.an('array')\n    .that.does.not.include(3);\n// 慎用 not 断言一个预期的,比没有预期的否定要好\nexpect(2).to.equal(2); // Recommended\nexpect(2).to.not.equal(1); // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "a1852ee7-24bb-4ea2-bf5a-3408ffa6dff7",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".deep - Sets the deep flag, later used by the equal and property assertions.",
      "fullTitle": "chai expect .deep - Sets the deep flag, later used by the equal and property assertions.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// Causes all .equal, .include, .members, .keys, and .property assertions\n        // that follow in the chain to use deep equality instead of strict (===) equality.\n        // Target object deeply (but not strictly) equals `{a: 1}`\n        expect({a: 1}).to.deep.equal({a: 1});\n        expect({a: 1}).to.not.equal({a: 1});\n        // Target array deeply (but not strictly) includes `{a: 1}`\n        expect([{a: 1}]).to.deep.include({a: 1});\n        expect([{a: 1}]).to.not.include({a: 1});\n        // Target object deeply (but not strictly) includes `x: {a: 1}`\n        expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n        expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n        // Target array deeply (but not strictly) has member `{a: 1}`\n        expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n        expect([{a: 1}]).to.not.have.members([{a: 1}]);\n        // Target set deeply (but not strictly) has key `{a: 1}`\n        expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n        expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n        // Target object deeply (but not strictly) has property `x: {a: 1}`\n        expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n        expect({x: {a: 1}}).to.not.have.property('x', {a: 1});",
      "err": {},
      "isRoot": false,
      "uuid": "63dfc865-d307-47a2-a45b-3107371fd495",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
      "fullTitle": "chai expect .nested - Enables dot- and bracket-notation in all .property and .include assertions that follow in the chain.",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n// If . or [] are part of an actual property name, they can be escaped by adding two backslashes before them.\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\nvar deepObj = {\n    green: {tea: 'matcha'}\n    , teas: ['chai', 'matcha', {tea: 'konacha'}]\n};\nexpect(deepObj).to.have.nested.property('green');\nexpect(deepObj).to.have.nested.property('green.tea','matcha');\nexpect(deepObj).to.have.nested.property('teas[1]','matcha');\nexpect(deepObj).to.have.nested.property('teas[2].tea','konacha');\nvar arr = [\n    ['chai', 'matcha', 'konacha']\n    , [{tea: 'chai'}\n        , {tea: 'matcha'}\n        , {tea: 'konacha'}]\n];\nexpect(arr).to.have.nested.property('[0][1]', 'matcha');\nexpect(arr).to.have.nested.property('[1][2].tea', 'konacha');",
      "err": {},
      "isRoot": false,
      "uuid": "2e51460d-7f28-4937-8436-b0ba69e78127",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
      "fullTitle": "chai expect .any - Sets the any flag, (opposite of the all flag) later used in the keys assertion.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(foo).to.have.any.keys('bar', 'baz');\nexpect({a:1,b:2}).to.not.have.any.keys('c','d');",
      "err": {},
      "isRoot": false,
      "uuid": "ebc01410-c557-44cc-bb3e-787d4c79488d",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
      "fullTitle": "chai expect .all - Sets the all flag (opposite of the any flag) later used by the keys assertion.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(foo1).to.have.all.keys('bar', 'baz');\nexpect({a:1,b:2}).to.have.all.keys('a','b');",
      "err": {},
      "isRoot": false,
      "uuid": "86963c33-376c-4158-a4e7-3c16e18757fb",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
      "fullTitle": "chai expect .a(type) - The a and an assertions are aliases that can be used either as language chains or to assert a value’s type.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foo').to.be.a('string');\nexpect({foo: 'bar'}).to.be.an('object');\nexpect(null).to.be.a('null');\nexpect(undefined).to.be.an('undefined');\nexpect(new Error).to.be.an('error');\nexpect(Promise.resolve()).to.be.a('promise');\nexpect(new Float32Array()).to.be.a('float32array');\nexpect(Symbol()).to.be.a('symbol');\n// language chain\nexpect(myFather).to.be.an.instanceof(Person);\n// .a supports objects\n// var myObj = {\n//     [Symbol.toStringTag]: 'myCustomType'\n// };\n// expect(myObj).to.be.a('myCustomType').but.not.an('object');\n// It’s often best to use .a to check a target’s type\n// before making more assertions on the same target.\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\nexpect([]).to.be.an('array').that.is.empty;\n// it’s often best to assert that the target is the expected type,\n// rather than asserting that it isn’t one of many unexpected types.\nexpect('foo').to.be.a('string'); // Recommended\nexpect('foo').to.not.be.an('array'); // Not recommended\n// .a accepts an optional msg argument\n// which is a custom error message to show when the assertion fails.\n// expect(1).to.be.a('string', 'nooo why fail??');\n// expect(1, 'nooo why fail??').to.be.a('string');\n\n// .a can also be used as a language chain to improve the readability of your assertions.\nexpect({b: 2}).to.have.a.property('b');",
      "err": {},
      "isRoot": false,
      "uuid": "ab714d1a-0091-433b-82c6-e1e7757a9704",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
      "fullTitle": "chai expect .include - The include and contain assertions can be used as either property based language chains or as methods to assert the inclusion of an object in an array or a substring in a string. ",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2, 3]).to.include(2);\nexpect('foobar').to.contain('foo');\nexpect({foo: 'bar', hello: 'universe'}).to.include.keys('foo');\nexpect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\nexpect(new Set([1, 2])).to.include(2);\nexpect(new Map([['a', 1], ['b', 2]])).to.include(2);\nexpect([1, 2, 3]).to.be.an('array').that.includes(2);\n// Target array deeply (but not strictly) includes `{a: 1}`\nexpect([{a: 1}]).to.deep.include({a: 1});\nexpect([{a: 1}]).to.not.include({a: 1});\n// Target object deeply (but not strictly) includes `x: {a: 1}`\nexpect({x: {a: 1}}).to.deep.include({x: {a: 1}});\nexpect({x: {a: 1}}).to.not.include({x: {a: 1}});\nObject.prototype.b = 2;\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\nexpect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\nexpect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\nexpect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\nexpect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\nexpect('foobar').to.not.include('taco');\nexpect([1, 2, 3]).to.not.include(4);\nexpect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\nexpect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\nexpect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\nexpect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n// expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n// expect([1, 2, 3], 'nooo why fail??').to.include(4);\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n// Target array is a superset of [1, 2] but not identical\nexpect([1, 2, 3]).to.include.members([1, 2]);\nexpect([1, 2, 3]).to.not.have.members([1, 2]);\n// Duplicates in the subset are ignored\nexpect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n// Both assertions are identical\nexpect({a: 1}).to.include.any.keys('a', 'b');\nexpect({a: 1}).to.have.any.keys('a', 'b');",
      "err": {},
      "isRoot": false,
      "uuid": "aac5002e-886e-4f68-bc40-b36066eebd9f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".ok - Asserts that the target is truthy.",
      "fullTitle": "chai expect .ok - Asserts that the target is truthy.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.be.ok; // Not recommended\nexpect(true).to.be.true; // Recommended\nexpect(true).to.be.ok; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.not.be.ok; // Not recommended\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.ok; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.be.ok; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.be.ok; // Not recommended\n// expect(false, 'nooo why fail??').to.be.ok;",
      "err": {},
      "isRoot": false,
      "uuid": "30e64a52-c0ed-4301-b2bf-477285c2a54e",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".true - Asserts that the target is true.",
      "fullTitle": "chai expect .true - Asserts that the target is true.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(true).to.be.true;\nexpect(false).to.be.false; // Recommended\nexpect(false).to.not.be.true; // Not recommended\nexpect(1).to.equal(1); // Recommended\nexpect(1).to.not.be.true; // Not recommended\n// expect(false, 'nooo why fail??').to.be.true;",
      "err": {},
      "isRoot": false,
      "uuid": "0ba36833-cceb-4358-9add-54872009eda3",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".false - Asserts that the target is false.",
      "fullTitle": "chai expect .false - Asserts that the target is false.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "//只有 false 等于 false\nexpect(false).to.be.false;\n//0 不是 false\nexpect(0).to.not.be.false;",
      "err": {},
      "isRoot": false,
      "uuid": "7aa5d7db-7464-4e84-8ecf-082a91b695a8",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".null - Asserts that the target is null.",
      "fullTitle": "chai expect .null - Asserts that the target is null.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(null).to.be.null;\nexpect(undefined).to.not.be.null;",
      "err": {},
      "isRoot": false,
      "uuid": "add709d3-5848-401c-94bf-e78e29383fd6",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".undefined - Asserts that the target is undefined.",
      "fullTitle": "chai expect .undefined - Asserts that the target is undefined.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(undefined).to.be.undefined;\nexpect(null).to.not.be.undefined;",
      "err": {},
      "isRoot": false,
      "uuid": "15acd0c2-92aa-4969-ae00-ca6d77445094",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".NaN - Asserts that the target is NaN.",
      "fullTitle": "chai expect .NaN - Asserts that the target is NaN.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(NaN).to.be.NaN;\nexpect(4).to.not.be.NaN;",
      "err": {},
      "isRoot": false,
      "uuid": "a979ea80-4903-41ca-bc52-087acb9d778c",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".exit - Asserts that the target is neither null nor undefined.",
      "fullTitle": "chai expect .exit - Asserts that the target is neither null nor undefined.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.equal(1); // Recommended\nexpect(1).to.exist; // Not recommended\nexpect(0).to.equal(0); // Recommended\nexpect(0).to.exist; // Not recommended\nexpect(null).to.be.null; // Recommended\nexpect(null).to.not.exist; // Not recommended\nexpect(undefined).to.be.undefined; // Recommended\nexpect(undefined).to.not.exist; // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "6e6f2eb1-a17a-403f-85ee-a3c248d106e4",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".empty - Asserts that the target’s length is 0. ",
      "fullTitle": "chai expect .empty - Asserts that the target’s length is 0. ",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([]).to.be.empty;\nexpect('').to.be.empty;\nexpect({}).to.be.empty;\nexpect(new Set()).to.be.empty;\nexpect(new Map()).to.be.empty;\nexpect([]).to.be.an('array').that.is.empty;\nexpect([1, 2, 3]).to.have.lengthOf(3); // Recommended\nexpect([1, 2, 3]).to.not.be.empty; // Not recommended\nexpect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\nexpect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\nexpect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\nexpect({a: 1}).to.not.be.empty; // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "2b2af0a4-d5f7-4aa0-adca-a3d7b74fe84a",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".arguments - Asserts that the target is an arguments object.",
      "fullTitle": "chai expect .arguments - Asserts that the target is an arguments object.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function test () {\n    expect(arguments).to.be.arguments;\n}\ntest();",
      "err": {},
      "isRoot": false,
      "uuid": "9f7e5147-d212-493c-bfeb-0f6111abe968",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
      "fullTitle": "chai expect .equal(value,[msg]) - Asserts that the target is strictly equal (===) to value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('hello').to.equal('hello');\nexpect(42).to.equal(42);\nexpect(1).to.not.equal(true);\nexpect({foo: 'bar'}).to.not.equal({foo: 'bar'});\nexpect({foo: 'bar'}).to.deep.equal({foo: 'bar'});",
      "err": {},
      "isRoot": false,
      "uuid": "ec6f8dfa-28be-46d3-898e-6dfbe112cc8c",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
      "fullTitle": "chai expect .eql(obj[,msg]) - Asserts that the target is deeply equal to value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({foo: 'bar'}).to.eql({foo: 'bar'});\nexpect([1, 2, 3]).to.eql([1, 2, 3]);",
      "err": {},
      "isRoot": false,
      "uuid": "1091ffa5-4a79-474f-ab0d-788def5abe91",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".above(value) - Asserts that the target is greater than value.",
      "fullTitle": "chai expect .above(value) - Asserts that the target is greater than value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(10).to.be.above(5);\nexpect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);",
      "err": {},
      "isRoot": false,
      "uuid": "1f20bdf1-d6e1-4bd6-ba04-c7c6032c3388",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".least(value) - Asserts that the target is greater than or equal to value",
      "fullTitle": "chai expect .least(value) - Asserts that the target is greater than or equal to value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(10).to.be.at.least(10);\nexpect('foo').to.have.length.of.at.least(2);\nexpect([1, 2, 3]).to.have.length.of.at.least(3);",
      "err": {},
      "isRoot": false,
      "uuid": "4023c362-7057-4983-8528-ffda693e3baa",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".below(value) - Asserts that the target is less than value.",
      "fullTitle": "chai expect .below(value) - Asserts that the target is less than value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(5).to.be.below(10);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);",
      "err": {},
      "isRoot": false,
      "uuid": "51b55626-313c-4cc6-a257-8aeb461d2d73",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".most(value) - Asserts that the target is less than or equal to value.",
      "fullTitle": "chai expect .most(value) - Asserts that the target is less than or equal to value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(5).to.be.at.most(5);\nexpect('foo').to.have.length.of.at.most(4);\nexpect([1, 2, 3]).to.have.length.of.at.most(3);",
      "err": {},
      "isRoot": false,
      "uuid": "8bfa4d44-98be-453b-92d2-8a01011d24fd",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".within(start,finish) - Asserts that the target is within a range.",
      "fullTitle": "chai expect .within(start,finish) - Asserts that the target is within a range.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(7).to.be.within(5, 10);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
      "err": {},
      "isRoot": false,
      "uuid": "b9212ec6-a37b-496e-ab71-7f672d70cc7f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".instanceof(constructor) - Asserts that the target is an instance of constructor.",
      "fullTitle": "chai expect .instanceof(constructor) - Asserts that the target is an instance of constructor.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var Tea = function (name) {\n    this.name = name;\n}, Chai = new Tea('chai');\nexpect(Chai).to.be.an.instanceof(Tea);\nexpect([1, 2, 3]).to.be.instanceof(Array);\nfunction Cat () { }\nexpect(new Cat()).to.be.an.instanceof(Cat);\nexpect([1, 2]).to.be.an.instanceof(Array);",
      "err": {},
      "isRoot": false,
      "uuid": "0f3809a3-dbba-40ea-84f4-6b91f1a967dc",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
      "fullTitle": "chai expect .property(name,[value[,msg]])Asserts that the target has a property name, optionally asserting that the value of that property is strictly equal to value. ",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "// simple referencing\nvar obj = {foo: 'bar'};\nexpect(obj).to.have.property('foo');\nexpect(obj).to.have.property('foo', 'bar');\n// Target object deeply (but not strictly) has property `x: {a: 1}`\nexpect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\nexpect({x: {a: 1}}).to.not.have.property('x', {a: 1});\nObject.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.own.property('a', 1);\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\nexpect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\nexpect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\nexpect({a: {b: [{c: 3}]}}).to.have.deep.nested.property('a.b[0]', {c: 3});\nexpect({b: 2}).to.not.have.property('a'); // Recommended\nexpect({b: 2}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 3}).to.have.property('a', 3); // Recommended\nexpect({a: 3}).to.not.have.property('a', 1); // Not recommended\nexpect({a: 1}).to.have.property('a').that.is.a('number');",
      "err": {},
      "isRoot": false,
      "uuid": "cb95b2d3-ed10-46cd-8c45-08f405f7f1fc",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
      "fullTitle": "chai expect .own - Causes all .property and .include assertions that follow in the chain to ignore inherited properties.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "Object.prototype.b = 2;\nexpect({a: 1}).to.have.own.property('a');\nexpect({a: 1}).to.have.property('b').but.not.own.property('b');\nexpect({a: 1}).to.own.include({a: 1});\nexpect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});",
      "err": {},
      "isRoot": false,
      "uuid": "b47b50ed-35a7-4d17-a20c-6f7e633b66d5",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".ownProperty(name) - Asserts that the target has an own property name.",
      "fullTitle": "chai expect .ownProperty(name) - Asserts that the target has an own property name.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('test').to.have.ownProperty('length');",
      "err": {},
      "isRoot": false,
      "uuid": "237a990e-0107-4232-a93b-49370bc5179f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
      "fullTitle": "chai expect .ownPropertyDescriptor(name[, descriptor[, message]]) - Asserts that the target has an own property descriptor name, that optionally matches descriptor.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({a: 1}).to.have.ownPropertyDescriptor('a');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value: 1\n});\nexpect('test').to.have.ownPropertyDescriptor('length');\nexpect('test').to.have.ownPropertyDescriptor('length', {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: 4\n});\nexpect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);\nexpect('test').ownPropertyDescriptor('length').to.have.keys('configurable', 'enumerable', 'value', 'writable');\nexpect({a: 1}).to.have.ownPropertyDescriptor('a')\n    .that.has.property('enumerable', true);",
      "err": {},
      "isRoot": false,
      "uuid": "0f620111-d9c3-43ae-b8c5-1d127525af2b",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
      "fullTitle": "chai expect .length - Sets the doLength flag later used as a chain precursor to a value comparison for the length property.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foo').to.have.length.above(2);\nexpect([1, 2, 3]).to.have.length.above(2);\nexpect('foo').to.have.length.below(4);\nexpect([1, 2, 3]).to.have.length.below(4);\nexpect('foo').to.have.length.within(2, 4);\nexpect([1, 2, 3]).to.have.length.within(2, 4);",
      "err": {},
      "isRoot": false,
      "uuid": "72e901df-c7c2-4657-871e-38588c1dc26f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
      "fullTitle": "chai expect .lengthOf(value[, message]) - Asserts that the target’s length property has the expected value.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2, 3]).to.have.lengthOf(3);\nexpect('foobar').to.have.lengthOf(6);\n// Recommended\nexpect([1, 2, 3]).to.have.lengthOf(3);\n// Not recommended\nexpect([1, 2, 3]).to.have.lengthOf.above(2);\nexpect([1, 2, 3]).to.have.lengthOf.below(4);\nexpect([1, 2, 3]).to.have.lengthOf.at.least(3);\nexpect([1, 2, 3]).to.have.lengthOf.at.most(3);\nexpect([1, 2, 3]).to.have.lengthOf.within(2,4);",
      "err": {},
      "isRoot": false,
      "uuid": "91a82c2a-99b2-4913-8a51-35fd2c38f6d5",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".match(regexp) - Asserts that the target matches a regular expression.",
      "fullTitle": "chai expect .match(regexp) - Asserts that the target matches a regular expression.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foobar').to.match(/^foo/);",
      "err": {},
      "isRoot": false,
      "uuid": "6ba3515d-43e3-4215-ab8e-2d060238ae2f",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "string(string) - Asserts that the string target contains another string.",
      "fullTitle": "chai expect string(string) - Asserts that the string target contains another string.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('foobar').to.have.string('bar');",
      "err": {},
      "isRoot": false,
      "uuid": "92a3535f-3686-463f-a96f-6849d2ebe5ab",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
      "fullTitle": "chai expect .keys(key1, [key2], […]) - Asserts that the target contains any or all of the passed-in keys. ",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect({a: 1, b: 2}).to.have.any.keys('a', 'c');\nexpect({a: 1, b: 2}).to.have.any.keys('a');\nexpect({a: 1, b: 2}).to.contain.any.keys('b', 'c');\nexpect({a: 1, b: 2}).to.contain.any.keys(['a']);\nexpect({a: 1, b: 2}).to.contain.any.keys({'a': 6});\nexpect({a: 1, b: 2}).to.have.all.keys(['b', 'a']);\nexpect({a: 1, b: 2}).to.have.all.keys({'b': 6, 'a': 7});\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys(['b', 'a']);\nexpect({a: 1, b: 2, c: 3}).to.contain.all.keys({'b': 6});\nexpect(['x', 'y']).to.have.all.keys(0, 1);\nexpect(['x', 'y']).to.have.all.keys([0, 1]);\nexpect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\nexpect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\nexpect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\nexpect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n// Target set deeply (but not strictly) has key `{a: 1}`\nexpect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\nexpect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n// Recommended; asserts that target doesn't have any of the given keys\nexpect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n// Not recommended; asserts that target doesn't have all of the given\n// keys but may or may not have some of them\nexpect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n// Recommended; asserts that target has all the given keys\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n// Not recommended; asserts that target has at least one of the given\n// keys but may or may not have more of them\nexpect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n// Both assertions are identical\nexpect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\nexpect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n// Target object's keys are a superset of ['a', 'b'] but not identical\nexpect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\nexpect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');",
      "err": {},
      "isRoot": false,
      "uuid": "65288702-5489-429d-aef4-ec4b9d881df0",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
      "fullTitle": "chai expect .throw(constructor) - Asserts that the function target will throw a specific error, or specific type of error (as determined using instanceof)",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw();\nvar badFn = function () { throw new TypeError('Illegal salmon!'); };\nexpect(badFn).to.throw(TypeError);\nvar err = new TypeError('Illegal salmon!');\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(err);\nexpect(badFn).to.throw(TypeError);\nexpect(badFn).to.throw(Error);\nexpect(badFn).to.throw('salmon');\nexpect(badFn).to.throw(/salmon/);\nexpect(badFn).to.throw(TypeError, 'salmon');\nexpect(badFn).to.throw(TypeError, /salmon/);\nexpect(badFn).to.throw(err, 'salmon');\nexpect(badFn).to.throw(err, /salmon/);\nvar err = new TypeError('Illegal salmon!');\nerr.code = 42;\nvar badFn = function () { throw err; };\nexpect(badFn).to.throw(TypeError).with.property('code', 42);\nvar goodFn = function () {};\nexpect(goodFn).to.not.throw();",
      "err": {},
      "isRoot": false,
      "uuid": "59a05a12-32b7-49da-adbf-51b53a04892e",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".respondTo(method) - Asserts that the object or class target will respond to a method.",
      "fullTitle": "chai expect .respondTo(method) - Asserts that the object or class target will respond to a method.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Cat () {}\nCat.prototype.meow = function () {};\nexpect(new Cat()).to.respondTo('meow');\nexpect(new Cat()).to.be.an('object').that.respondsTo('meow');\nfunction Cat () {}\nCat.prototype.meow = function () {};\nexpect(Cat).to.respondTo('meow');",
      "err": {},
      "isRoot": false,
      "uuid": "bf0baa81-ee84-4a7d-860e-336194f9a1bf",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".itself - Sets the itself flag, later used by the respondTo assertion.",
      "fullTitle": "chai expect .itself - Sets the itself flag, later used by the respondTo assertion.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "function Cat () {}\nCat.prototype.meow = function () {};\nCat.hiss = function () {};\nexpect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');",
      "err": {},
      "isRoot": false,
      "uuid": "66065ea0-1369-494e-85fb-fc58381ce252",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".satisfy(method) - Asserts that the target passes a given truth test.",
      "fullTitle": "chai expect .satisfy(method) - Asserts that the target passes a given truth test.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.satisfy(function (num) {\n    return num > 0;\n});",
      "err": {},
      "isRoot": false,
      "uuid": "de82e9db-2a76-447e-aa51-6888638a9071",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
      "fullTitle": "chai expect .closeTo(expected, delta) - Asserts that the target is equal expected, to within a +/- delta range.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1.5).to.be.closeTo(1, 0.5);",
      "err": {},
      "isRoot": false,
      "uuid": "8dbeec3a-6cbf-4d8d-b8e4-4ee17f34e209",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
      "fullTitle": "chai expect .members(set) - Asserts that the target is a superset of set, or that the target and set have the same strictly-equal (===) members.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2, 3]).to.include.members([3, 2]);\nexpect([1, 2, 3]).to.not.include.members([3, 2, 8]);\nexpect([4, 2]).to.have.members([2, 4]);\nexpect([5, 2]).to.not.have.members([5, 2, 1]);\nexpect([{a: 1}]).to.deep.include.members([{a: 1}]);\nexpect([{a: 1}]).to.have.deep.members([{a: 1}]);\nexpect([{a: 1}]).to.not.have.members([{a: 1}]);",
      "err": {},
      "isRoot": false,
      "uuid": "f7657385-fabe-4c39-98d8-42a7a9e4b324",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
      "fullTitle": "chai expect ordered - Causes all .members assertions that follow in the chain to require that members be in the same order.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect([1, 2]).to.have.ordered.members([1, 2])\n    .but.not.have.ordered.members([2, 1]);\n// When .include and .ordered are combined, the ordering begins at the start of both arrays.\nexpect([1, 2, 3]).to.include.ordered.members([1, 2])\n    .but.not.include.ordered.members([2, 3]);",
      "err": {},
      "isRoot": false,
      "uuid": "e3aad40b-6f56-4930-9649-032413007f76",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
      "fullTitle": "chai expect .oneOf(list) - Assert that a value appears somewhere in the top level of array list.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect('a').to.be.oneOf(['a', 'b', 'c']);\nexpect(9).to.not.be.oneOf(['z']);\nexpect([3]).to.not.be.oneOf([1, 2, [3]]);\nvar three = [3];\n// for object-types, contents are not compared\nexpect(three).to.not.be.oneOf([1, 2, [3]]);\n// comparing references works\nexpect(three).to.be.oneOf([1, 2, three]);",
      "err": {},
      "isRoot": false,
      "uuid": "d9e054d7-66d3-4b96-9dae-fab6fba52cd0",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".change(function) - Asserts that a function changes an object property",
      "fullTitle": "chai expect .change(function) - Asserts that a function changes an object property",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var dots = ''\n    , addDot = function () { dots += '.'; }\n    , getDots = function () { return dots; };\n// Recommended\nexpect(getDots()).to.equal('');\naddDot();\nexpect(getDots()).to.equal('.');\n// Not recommended\nexpect(addDot).to.change(getDots);\nvar myObj = {dots: ''}\n    , addDot = function () { myObj.dots += '.'; };\n// Recommended\nexpect(myObj).to.have.property('dots', '');\naddDot();\nexpect(myObj).to.have.property('dots', '.');\n// Not recommended\nexpect(addDot).to.change(myObj, 'dots');",
      "err": {},
      "isRoot": false,
      "uuid": "36e90dca-c02e-4335-985f-0ebc2f4c92ec",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".increase(function) - Asserts that a function increases an object property",
      "fullTitle": "chai expect .increase(function) - Asserts that a function increases an object property",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var val = 1\n    , addTwo = function () { val += 2; }\n    , getVal = function () { return val; };\nexpect(addTwo).to.increase(getVal).by(2); // Recommended\nexpect(addTwo).to.increase(getVal); // Not recommended\nvar myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\nexpect(addTwo).to.increase(myObj, 'val'); // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "d8bba6e6-9d2c-432f-b9a4-e111da8c1082",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".decrease(function) - Asserts that a function decreases an object property",
      "fullTitle": "chai expect .decrease(function) - Asserts that a function decreases an object property",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var val = 1\n    , subtractTwo = function () { val -= 2; }\n    , getVal = function () { return val; };\nexpect(subtractTwo).to.decrease(getVal).by(2); // Recommended\nexpect(subtractTwo).to.decrease(getVal); // Not recommended\nvar myObj = {val: 1}\n    , subtractTwo = function () { myObj.val -= 2; };\nexpect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\nexpect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "fcd6d7c0-82bc-4447-9695-e6e64a8236ca",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
      "fullTitle": "chai expect .by(delta[, msg]) - When following an .increase assertion in the chain, .by asserts that the subject of the .increase assertion increased by the given delta.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var myObj = {val: 1}\n    , addTwo = function () { myObj.val += 2; };\nexpect(addTwo).to.increase(myObj, 'val').by(2);",
      "err": {},
      "isRoot": false,
      "uuid": "24d5f5c9-d26b-4a55-acee-d41338c078be",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".extensible - Asserts that the target is extensible (can have new properties added to it).",
      "fullTitle": "chai expect .extensible - Asserts that the target is extensible (can have new properties added to it).",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var nonExtensibleObject = Object.preventExtensions({});\nvar sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect({}).to.be.extensible;\nexpect(nonExtensibleObject).to.not.be.extensible;\nexpect(sealedObject).to.not.be.extensible;\nexpect(frozenObject).to.not.be.extensible;\nexpect({a: 1}).to.be.extensible;",
      "err": {},
      "isRoot": false,
      "uuid": "2d2c9b8e-b55a-401b-aa13-d7486c415f05",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
      "fullTitle": "chai expect .sealed - Asserts that the target is sealed (cannot have new properties added to it and its existing properties cannot be removed).",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var sealedObject = Object.seal({});\nvar frozenObject = Object.freeze({});\nexpect(sealedObject).to.be.sealed;\nexpect(frozenObject).to.be.sealed;\nexpect({}).to.not.be.sealed;\nexpect(1).to.be.sealed;",
      "err": {},
      "isRoot": false,
      "uuid": "4a930909-0296-4c87-a100-0c91738de2b5",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
      "fullTitle": "chai expect .frozen - Asserts that the target is frozen (cannot have new properties added to it and its existing properties cannot be modified).",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var frozenObject = Object.freeze({});\nexpect(frozenObject).to.be.frozen;\nexpect({}).to.not.be.frozen;\nexpect(1).to.be.frozen;",
      "err": {},
      "isRoot": false,
      "uuid": "ac386ab4-6062-4443-83fc-7d6fe06d52bf",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": ".finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
      "fullTitle": "chai expect .finite - Asserts that the target is a number, and isn’t NaN or positive/negative Infinity.",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "expect(1).to.be.finite;\nexpect(Infinity).to.equal(Infinity); // Recommended\nexpect(Infinity).to.not.be.finite; // Not recommended\nexpect(-Infinity).to.equal(-Infinity); // Recommended\nexpect(-Infinity).to.not.be.finite; // Not recommended",
      "err": {},
      "isRoot": false,
      "uuid": "5ba6ed39-4dbd-40a1-b722-efdf412617f0",
      "parentUUID": "728ff6bb-67f9-476d-8ebc-667a704e58c4",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}